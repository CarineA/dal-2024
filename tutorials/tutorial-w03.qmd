---
title: "QML tutorial - Week 3"
editor: visual
execute:
  freeze: auto
format: 
  html:
    css: [webex.css]
    include-after-body: [webex.js]
    embed-resources: true 
---

```{r}
#| label: packages
#| echo: false
#| message: false

library(tidyverse)
library(webexercises)
```

## Rmarkdown

Last week, you learnt how to use R scripts to save your code.

Keeping track of the code you use for data analysis is a very important aspect of research project managing: not only the code is there if you need to rerun it later, but it allows your data analysis to be **reproducible** (i.e., it can be reproduced by you or other people in such a way that starting with the same data and code you get to the same results).

::: callout-tip
#### Reproducible research

Research is **reproducible** when the same data and same code return the same results.
:::

R scripts are great for writing code, and you can even document the code (add explanations or notes) with comments (i.e. lines that start with `#`).

But for longer text or complex data analysis reports, R scripts can be a bit cumbersome.

A solution to this is using Rmarkdown files (they have the `.Rmd` extension).

### Code... and text!

Rmarkdown is a file format that allows you to mix code and formatted text in the same file.

This means that you can write **dynamic reports** using Rmd files: dynamic reports are just like analysis reports (i.e. they include formatted text, plots, tables, code output, code, etc...) but they are **dynamic** in the sense that if, for example, data or code changes, you can just rerun the report Rmd file and all code output (plots, tables, etc...) is updated accordingly!

You can watch this short video for a quick tour.

{{< video https://vimeo.com/178485416 >}}

::: callout-tip
#### Dynamic reports in R Markdown

**R Markdown** is a file type with extension `.Rmd` in which you can write formatted text and code together.

R Markdown can be used to generate **dynamic reports**: these are files that are generated automatically from the R Markdown source, ensuring data and results in the report are always up to date.
:::

### Formatting text

R comments in R scripts cannot be formatted (for example, you can't make bold or italic texts).

Text in Rmd files can be fully formatted using a simple but powerful **mark-up language** called [markdown](https://www.markdownguide.org).

You don't have to learn markdown all in one go, so I encourage you to just learn it bit by bit, in your time. You can look at the the [Markdown Guide]() for an in-depth intro and/or dive in the [Markdown Tutorial](https://www.markdowntutorial.com) for a hands-on approach.

A few quick pointers (you can test them in the [Markdown Live Preview](https://markdownlivepreview.com)):

-   Text can be made italics by enclosing it between single stars: `*this text is in italics*`.

-   You can make text bold with two stars: `**this text is bold!**`.

-   Headings are created with `#`: `# This is a level-1 heading`. `## This is a level-2 heading`.

::: callout-tip
#### Mark-up, Markdown

A **mark-up language** is a text-formatting system consisting of symbols or keywords that control the structure, formatting or relationships of textual elements. The most common mark-up languages are HTML, XML and TeX.

**Markdown** is a simple yet powerful mark-up language.
:::

### Create an Rmd file

::: callout-warning
#### Important

When working through these tutorials, always **make sure you are in the course RStudio Project** you just created.

You know you are in an RStudio Project because you can see the name of the Project in the top-right corner of RStudio, next to the light-blue cube icon.

If you see `Project (none)` in the top-right corner, that means **you are not** in an RStudio Project.

To make sure you are in the RStudio project, you can open the project by going to the project folder in File Explorer (Win) or Finder (macOS) and double click on the `.Rproj` file.
:::

To create a new Rmd file, just click on the `New file` button, then `R Markdown...`. (If you are asked to install/update packages, do so.)

![](/img/new-rmd.png)

A window will open. Add a title of your choice and your name, then click `OK`.

![](/img/new-rmd-window.png)

A new Rmd file will be created and will open in the File Editor panel in RStudio.

**Note** that creating an Rmd file does not automatically saves it on your computer. To do so, either use the keyboard short-cut `CMD+S`/`CTRL+S` or click on the floppy disk icon in the menu below the file tab.

![](/img/save-rmd.png)

Save the file inside the `code/` folder with the following name: `tutorial-w03.Rmd`.

Remember that all the files of your RStudio project don't live inside RStudio but on your computer. So you can always access them from the Finder or File Explorer!

### Parts of an Rmd file

An Rmd file usually has three main parts:

-   The preamble (green).

-   Code chunks (orange).

-   Text (blue).

![](/img/rmd-parts.png)

Each Rmd file has to start with a preamble, but you can include as many code chunks and as much text as you wish, in any order.

::: callout-tip
#### R Markdown: Preamble

The **preamble** of an `.Rmd` file contains a list of `key: value` pairs, used to specify settings or document info like the `title` and `author`.

Preambles start and end with three dashes `---`.
:::

::: callout-tip
#### R Markdown: Code chunks

**Code chunks** start and end with three back-ticks ```` ``` ```` and they contain code.

Settings can be specified between curly brackets `{}` on the first ```` ``` ```` line: for example `{r chunk-name, eval=FALSE}`. `r` indicates that the code is R code.
:::

### Render Rmd files to HTML

You can render an Rmd file into a nicely formatted HTML file.

To render an Rmd file, just click on the **Knit** button and an HTML file will be created and saved in the same location of the Rmd file.

![](/img/knit.png)

It will also be shown in the Viewer pane (like in the picture below) or in a new window (you can set this option in the RStudio preferences \> R Markdown \> Basics \> Show output preview in...).

![](/img/rendered.png)

Rendering Rmd files is not restricted to HTML, but also PDFs and even Word documents!

This is very handy when you are writing an analysis report you need to share with others.

::: callout-tip
#### R Markdown: Rendering

Rmd files can be **rendered** into other formats, like HTML, PDF and Word documents.
:::

### How to run code

The first code chunk in an Rmd file is a special one: it's called `setup` and it's where you attach all the packages needed for running the code in the file. (You can find the name of a code chunk---or define one yourself!---in the first line of a code block: ```` ```{r chunk-name} ````). The first code chunk of an Rmd file should always be named `setup`.

The `setup` code chunk also has special code from the knitr package. The knitr package is what allows you to run R code from Rmd files.

The line `knitr::opts_chunk$set(echo = TRUE)` sets the option `echo` to `TRUE`. The `echo` option let's you decide whether you want the R code printed (echoed) in the rendered Rmd file. When `echo = TRUE` the code is printed, when `echo = FALSE` the code is not printed.

Now go ahead and add `library(tidyverse)` in the line below the `knitr::opts_chunk` line.

::: callout-note
#### Running code

To run the code of a code chunk you can use different approaches:

-   Click on the green arrow to the right of the code chunk to run the entire code chunk.

-   Alternatively, place the text cursor inside the code chunk and press `CMD/CTRL + SHIFT + ENTER`.

-   You can also run line by line as you do in an R script by placing the text cursor on the line you want to run and press `CMD/CTRL + ENTER`.
:::

Now delete everything after the `setup` code chunk and write a new level-2 heading after the chunk with the name "Plotting basics". (Remember to leave an empty line between the chunk and the heading.)

![](/img/rmd-setup.png)

You will use this Rmd file to write text and code for this tutorial. To insert a new code chunk, you can click on the `Insert a new code chunk` button and then select `R`, or you can press `OPT/ALT + CMD/CTRL + I`.

![](/img/rmd-new-chunk.png)

A new R code chunk will be inserted at the text cursor position.

## Some basics

In the tutorial last week you've been playing around with R and variables.

**But what if you want to import data in R?**

Easy! You can use the `read_*()` functions to read your files into R. But before we dive in, let's first talk about some computer basics. (You can skip this section if it's too basic for you)

### Files, folder and file extensions

Files saved on your computer live in a specific place. For example, if you download a file from a browser (like Google Chrome, Safari or Firefox), the file is normally saved in the `Download` folder.

But where does the `Download` folder live? Usually, in your user folder! The user folder normally is the name of your account or a name you picked when you created your computer account. In my case, my user folder is simply called `ste`.

::: callout-tip
#### User folder

The **user folder** is the folder with the name of your account.
:::

::: {.callout-note collapse="true"}
#### How to find your user folder name

**On macOS**

-   Open the Finder Preferences.

-   Go to `Sidebar`.

-   The name next to the house icon is the name of your home folder.

**On Windows**

-   Right-click an empty area on the navigation panel in File Explorer.

-   From the context menu, select the 'Show all folders' and your user profile will be added as a location in the navigation bar.
:::

So, let's assume I download a file, let's say `big_data.csv`, in the `Download` folder of my user folder.

Now we can represent the location of the `big_data.csv` file like so:

```         
ste/
└── Downloads/
    └── big_data.csv
```

To mark that `ste` and `Downloads` are folders, we add a final forward slash `/`. That simply means "hey! I am a folder!". `big_data.csv` is a file, so it doesn't have a final `/`.

Instead, the file name `big_data.csv` has a **file extension**. The file extension is `.csv`. A file extension marks the type of file: in this the `big_data` file is a `.csv` file, a comma separated value file (we will see an example of what that looks like later).

Different file type have different file extensions:

-   Excel files: `.xlsx`.
-   Plain text files: `.txt`.
-   Images: `.png`, `.jpg`, `.gif`.
-   Audio: `.mp3`, `.wav`.
-   Video: `.mp4`, `.mov`, `.avi`.
-   Etc...

::: callout-tip
#### File extension

A file extension is a sequence of letters that indicates the type of a file and it's separated with a `.` from the file name.
:::

### File paths

Now, we can use an alternative, more succinct way, to represent the location of the `big_data.csv`:

`ste/Downloads/big_data.csv`

This is called a **file path**! It's the path through folders that lead you to the file. Folders are separated by `/` and the file is marked with the extension `.csv`.

::: callout-tip
#### File path

A **file path** indicates the location of a file on a computer as a path through folders that lead you to the file.
:::

Now the million pound question: where does `ste/` live on my computer???

User folders are located in different places depending on the operating system you are using:

-   On **macOS**: the user folder is in `/Users/`.

    -   You will notice that there is a forward slash also before the name of the folder. That is because the `/Users/` folder is a top folder, i.e. there are no folders further up in the hierarchy of folders.
    -   This means that the full path for the `big_data.csv` file on a computer running macOS would be: `/Users/ste/Downloads/big_data.csv`.

-   On **Windows**: the user folder is in `C:/Users/`

    -   You will notice that `C` is followed by a colon `:`. That is because `C` is a drive, which contains files and folders. `C:` is not contained by any other folder, i.e. there are no other folders above `C:` in the hierarchy of folders.
    -   This means that the full path for the `big_data.csv` file on a Windows computer would be: `C:/Users/ste/Downloads/big_data.csv`.

When a file path starts from a top-most folder, we call that path the **absolute** file path.

::: callout-tip
#### Absolute path

An **absolute path** is a file path that starts with a top-most folder.
:::

There is another type of file paths, called **relative** paths. A relative path is a partial file path, relative to a specific folder. You will learn how to use relative paths below, when we will go through importing files in R using R scripts below.

Importing files in R is very easy with the tidyverse packages. You just need to know the file type (very often the file extension helps) and the location of the file (i.e. the file path).

The next sections will teach you how to import data in R!

::: callout-note
#### Quiz 1

```{r}
#| label: quiz-1
#| results: asis
#| echo: false

opts_1 <- c(
   "`Downloads/courses/qml/data/`",
   answer = "`/Users/smruti/Downloads/data.csv/files/`",
   "`sascha/Documents/files_pdf/paper.pdf`"
)

cat("Which of the following paths is an impossible path?", longmcq(opts_1))
```
:::

### Write code

Now, let's start writing code in the script!

Generally, you start the script with calls to `library()` to load all the packages you need for the script.

Now we only need one package, tidyverse, but in most cases you will need more than one! The best practice is to attach all of packages first, in the top of your script. Please, get in the habit of doing this from now, so that you can keep your scripts tidy and pretty!

Go ahead, write the following code in the top of the `tutorial-w02.R` script.

```{r}
#| label: read-shallow
#| message: false
library(tidyverse)

shallow <- read_csv("./data/shallow.csv")
```

Wait, what is that `"./data/shallow.csv"`? That's a **relative path**. We briefly mentioned relative paths above, but let's understand the details now.

::: callout-warning
Please, don't include `install.packages()` in your R scripts!

Remember, you only have to install a package once, and you can just type it in the Console.

But **DO** include `library()` in your scripts.
:::

### Relative paths

::: callout-tip
#### Relative path

A **relative path** is a file path that is relative to a folder, which is represented by `./`
:::

When you are using R scripts in RStudio projects, the `./` folder paths are relative to is the project folder! This is true whichever the name of the folder/project and whichever it's location on your computer.

For example, if your project it's called `awesome_proj` and it's in `Downloads/stuff/`, then if you write `./data/results.csv` you really mean `Downloads/stuff/awesome_proj/data/results.csv`!

**How does R know the path is relative to the project folder?**

That is because when working with RStudio projects, all relative paths are relative to the project folder (i.e. the folder with the `.Rproj` file)!

The folder which relative paths are relative to is called the **working directory** (directory is just another way of saying folder).

::: callout-tip
#### Working directory

The **working directory** is the folder which relative paths are relative to.

When using RStudio projects, the working directory is the project folder.
:::

The code `read_csv("./data/shallow.csv")` above will work because you are using an RStudio project and inside the project folder there is a folder called `data/` and in it there's the `shallow.csv` file.

So from now on I encourage you to use RStudio projects, R scripts and relative paths always!

The benefit of doing so is that, if you move your project or rename it, or if you share the project with somebody, all the paths will just work because they are relative!

::: {.callout-note collapse="true"}
#### Get the working directory

You can get the current working directory with the `getwd()` command.

Run it now in the Console! Is the returned path the project folder path?

If not, it might be that you are not working from the RStudio project. Check the top-right corner of RStudio: is the project name in there or do you see `Project (none)?`

If it's the latter, you are not in an RStudio project, but you are running R from somewhere else (meaning, the working directory is somewhere else).
:::

## The data

For this tutorial, we will use the data from this paper: Song et al. 2020. *Second language users exhibit shallow morphological processing*. DOI: [10.1017/S0272263120000170](https://doi.org/10.1017/S0272263120000170).

The study consisted of a lexical decision task in which participants where first shown a prime, followed by a target word for which they had to indicate whether it was a real word or a nonce word.

The prime word belonged to one of three possible groups (`Relation_type` in the data) each of which refers to the morphological relation of the prime and the target word:

-   `Unrelated`: for example, *prolong* (assuming *unkindness* as target, \[\[un-kind\]-ness\]).

-   `Constituent`: *unkind*.

-   `NonConstituent`: *kindness*.

The expectations are that

1.  Lexical decisions for native English participants should be facilitated in the `Constituent` condition, but not in the `Unrelated` and `NonConstituent` conditions.
2.  Lexical decisions for non-native English participants should be facilitated both in the `Constituent` and `NonCostituent` condition, but not in the `Unrelated` condition.

We can interpret "facilitated lexical decisions" as higher accuracy and shorter reaction times.

In section 2-4 of this tutorial you will learn about:

-   The data file format (a `.csv file`).

-   How to read data with the `read_csv()` function from the tidyverse packages and what packages are.

-   How to view the imported data.

### Download the data file

Please, follow these instructions carefully.

1.  Download the file with the data by right-clicking on the following link and download the file: [shallow.csv](../data/shallow.csv). (Note that tutorial files are also linked in the [Course content](../content.qmd) page)

2.  Create a folder called `data/` (the slash is there just to remind you that it's a folder, but you don't have to include it in the name) in the RStudio project of the course.

    1.  To create a folder, go to the Files tab of the bottom-right panel in RStudio.

    2.  Make sure you are viewing the project's main folder.

    3.  Click on the `New Folder` button, enter "data" in the text box and click `OK`

3.  Move the downloaded file into the `data/` folder.

    1.  Open a Finder or File Explorer window.

    2.  Navigate to the folder where you have saved the downloaded file (it will very likely be the `Downloads/` folder).

    3.  Copy the file.

    4.  In Finder or File Explorer, navigate to the RStudio project folder, then the `data/` folder, and paste the file in there.

The rest of the tutorial will assume that you have created a folder called `data/` in the RStudio project folder and that `shallow.csv` is in that folder.

I recommend you to start being very organised with your files from now, whether it's for this course or your dissertation or else. I also suggest to avoid overly nested structures (for example, avoid having one folder for each week for this course. Rather, save all data files in the `data/` folder).

::: {.callout-note collapse="true"}
#### Organising your files

The Open Science Framework has the following recommendations that apply very well to any type of research project.

-   Use **one folder** per project. This will also be your RStudio project folder.

-   Separate **raw data** from **derived data**.

-   Separate **code** from **data**.

-   Make **raw data read-only**.

To learn more about this, check the OSF page [Organising files](https://help.osf.io/article/147-organizing-files).

In brief, what these recommendations mean is that you want a folder for your research project/course/else, and inside the folder two folders: one for data and one for code.

The `data/` folder could further contain `raw/` for raw data (data that should not be lost or changed, for example collected data or annotations) and `derived/` for data that derives from the raw data, for example through automated data processing.

I usually also have a separate folder called `figs/` or `img/` where I save plots. Of course which folders you will have it's ultimately up to you and needs will vary depending on the project and field!
:::

### About `shallow.csv`

`shallow.csv` is a `.csv` file. It looks like this (the following is just an excerpt from the file, specifically the first 5 lines):

``` txt
Group,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching
L1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA
L1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left
L1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left
L1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA
```

A `.csv` file is basically a format to save tabular data (i.e. data that looks like a table). To separate each column, a `.csv` file uses a comma `,` (hence the name "comma separated values").

The first line of the file indicates the names of the columns of the table:

``` txt
Group,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching
```

There are 11 columns.

Then, the rest of the file contains the other rows of the table, with values for each of the 11 columns. Of course, separated by commas.

``` txt
L1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA
L1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left
L1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left
L1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA
```

The `shallow.csv` file should be placed in the `data/` folder of the course RStudio project.

Now, let's import the data!

Importing `.csv` files is very easy. You can use the `read_csv()` function from a collection of R packages known as the [tidyverse](https://www.tidyverse.org).



## Import and view data

### Import the data

To import data in R we will use the `read_csv()` function from the [readr](https://readr.tidyverse.org) package, one of the tidyverse packages.

The `read_csv()` function only requires you to specify the file path as a string (remember, strings are quoted between `" "`, for example `"year_data.txt"`).

On my computer, the file path of `shallow.csv` is `/Users/ste/qml/data/shallow.csv`, but on your computer the file path will be different, of course.

Also, note that it is not enough to use the `read_csv()` function. You also must assign the output of the `read_csv()` function (i.e. the data we are reading) to a variable, using the assignment arrow `<-`.

And since the `read_csv()` is a function from the tidyverse, you first need to attach the tidyverse packages with `library(tidyverse)` (remember, you need to attach packages **only once** per session).

This will attach a set of the tidyverse packages that are commonly used in most data analysis applications, including readr. Of course, you can also attach the individual packages directly: `library(readr)`. If you use `library(tidyverse)` there is no need to attach individual tidyverse packages.

So, putting all together, here's the code. **Remember to change the file path to match the path of the file on your computer**. Run the code in the Console to read the data.

```{r}
#| label: read-example
#| eval: false
library(tidyverse)

# CHANGE THE FILE PATH TO MATCH THE PATH ON YOUR COMPUTER
shallow <- read_csv("/Users/ste/qml/data/shallow.csv")
```

Fantastic!

### View the data

Now we can view the data.

The easiest way is to click on the name of the data listed in the **Environment** tab, in the top-right panel of RStudio.

You will see a nicely formatted table, as you would in a programme like Excel.

Data tables in R (i.e. spreadsheet-like data) are called **data frames** or **tibbles**.[^1]

[^1]: A **tibble** is a special data frame. We will learn more about tibbles in the following weeks.

The `shallow` data frame contains 11 columns (called variables in the `Environment` tab). The 11 columns are the following:

-   `Group`: `L1` vs `L2` speakers of English.
-   `ID`: Subject unique ID.
-   `List`: Word list (A to F).
-   `Target`: Target word in the lexical decision trial.
-   `ACC`: Lexical decision response accuracy (`0` incorrect response, `1` correct response).
-   `RT`: Reaction times of response in milliseconds.
-   `logRT`: Logged reaction times.
-   `Critical_Filler`: Whether the trial was a `filler` or `critical`.
-   `Word_Nonword`: Whether the Target was a real `Word` or a `Nonword`.
-   `Relation_type`: The type of relation between prime and target word (`Unrelated`, `NonCostituent`, `Constituent`, `Phonological`).
-   `Branching`: Constituent syntactic branching, `Left` and `Right` (shout out to Charlie Puth).

::: callout-note
#### Quiz 3

```{r}
#| label: quiz-3
#| results: asis
#| echo: false

opts_3 <- c(
   "11",
   "650",
   answer = "6500"
)

cat("How many rows does `shallow` have?", longmcq(opts_3))
```
:::

Great stuff! See how easy it was to import data?

::: callout-tip
## Data formats

Most of the data we will be using in this course will be in the `.csv` format.

**The comma separated values format (`.csv`) is the best format to save data in** because it is basically a plain text file, it's quick to parse, and can be opened and edited with any software (plus, it's not a proprietary format).
:::

However, you can easily import other file types as long as they are tabular or rectangular (i.e. spreadsheet-like), like Excel files.

::: {.callout-note collapse="true"}
#### How to import other file types

Sometimes though you might have to read other file types, for example Excel spreadsheets.

It's easy to read other file type using the other `read_*()` functions:

-   For Excel files (i.e. files with a `.xls` or `.xlsx` extension), you need to attach the [readxl](https://readxl.tidyverse.org) package with `library(readxl)` and use the `read_excel()` function.

-   Use `read_tsv()` from the readr package (installed with the tidyverse) to read tab separated values files (these have either the `.txt` or `.tsv` extensions.

-   The flexible `read_delim()` function allows you to read a wide variety of delimited files.
:::

::: {.callout-note collapse="true"}
#### Practice 1

Download the following files into the data folder. Read them in R, making sure you use the right `read_*()` function.

-   [takete_maluma.txt](../data/takete_maluma.txt) (a tab separated file)

-   [Relatives.xlsx](../data/Relatives.xlsx)

-   Go to <https://datashare.ed.ac.uk/handle/10283/4006> and download the file `conflict_data_.xlsx`. Read both sheets ("conflict_data2" and "demographics"). Any issues?
:::
