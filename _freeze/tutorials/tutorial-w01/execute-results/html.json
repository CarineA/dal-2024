{
  "hash": "8809cc12fb09e4a46a2cbede6da2d706",
  "result": {
    "markdown": "---\ntitle: \"QML tutorial - Week 1\"\neditor: visual\nformat: \n  html:\n    css: [webex.css]\n    include-after-body: [webex.js]\n---\n\n\n\n\n## Why R?\n\nR can be used to **analyse all sorts of data**, from tabular data (also known as \"spreadsheets\"), textual data, geographic data and even images.\n\n![](../img/what-r-for.png)\n\nThis course will focus on the analysis of tabular data, since all of the techniques relevant to this type of data also apply to the other types.\n\n![](../img/inclusive-community.png)\n\nThe R community is a **very inclusive community** and it's easy to find help. There are several groups that promote R in minority/minoritised groups, like [R-Ladies](https://www.r-consortium.org/all-projects/r-ladies), [Africa R](https://r4africa.org), and [Rainbow R](https://rainbowr.netlify.app) just to mention a few.\n\nMoreover, R is **open source and free**!\n\n## The R console\n\n::: callout-tip\n### R\n\n-   R is a **programming language**.\n\n-   We use programming languages to **interact** with computers.\n\n-   You run **commands** written in a **console** and the task related to the command is **executed**.\n:::\n\nWe will begin our R journey with some basics concepts from computer science. The box above introduces you to three important concepts:\n\n-   **Programming languages**.\n-   **Executing commands**.\n-   **Console**.\n\nR comes with its own console. **Open now the R Console.**\n\nIt should look like the following (there will be some aesthetic differences since you are using Windows).\n\n![](../img/r-console.png)\n\nThe Console is an interactive interface that allows you to input commands and execute them.\n\nYou know you can enter a command because the **prompt** (`>`) is displayed, and next to it you can see the text cursor (`|`) flashing.\n\nTry writing the following command (you will learn more about R commands below):\n\n``` r\ncat(\"Hello!\")\n```\n\nTo **execute** the command (aka **run** the command), press `ENTER/RETURN` on your keyboard.\n\nThe command `cat(\"Hello!\")` returns (aka outputs) in the console the text given between double quotes: `Hello`.\n\nCongratulations, you have run your first R command! This command involved a **function** (more on functions below): the `cat()` function (no feline involvement...).\n\nSo there are different types of R commands that you can use. In the following sections you will learn about the basic types of R commands and what they can be used for.\n\nYou will learn more and more commands throughout the course. You don't have to memorise them all at once: focus on understanding what they can be useful for and if you don't remember the details, you can always check them!\n\n## R basics\n\nIn this part of the tutorial you will learn the very basics of R.\n\nIf you have prior experience with programming, you should find all this familiar. If not, not to worry! Make sure you understand the concept highlighted in the green boxes and practice the related skills.\n\nFor this tutorial, you will just run code directly in the R Console, i.e. you will type code in the Console and press `ENTER/RETURN` (`ENTER` from now on) to run it.\n\nIn future tutorials, you will learn how to save your code in a script file, so that you can keep track of what you have run and make your work **reproducible**.\n\n### R as a calculator\n\nWrite this line of code `1 + 2` in the `Console`, then press `ENTER` to run it.\n\nFantastic! You should see that the answer of the addition has been printed in the `Console`, like this:\n\n```         \n[1] 3\n```\n\n(Never mind the `[1]` part for now).\n\n::: callout-tip\n#### Arithmentic operations\n\nYou can run arithmetic operations using **maths operators**: the most common are `+, -, *, /` for addition, subtraction, multiplication and division.\n:::\n\nNow, try some more operations (write one line and press `ENTER`, then write the following line and so on...). Feel free to add your own operations to the mix!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n67 - 13\n2 * 4\n268 / 43\n```\n:::\n\n\nYou can also chain multiple operations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n6 + 4 - 1 + 2\n4 * 2 + 3 * 2\n```\n:::\n\n\n::: callout-note\n#### Quiz 2\n\n\n**Are the following statements true of false?** \n\na. `3 * 2 / 4` returns the same result as `3 * (2 / 4)` <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select> \n\nb. `10 * 2 + 5 * 0.2` returns the same result as `(10 * 2 + 5) * 0.2` <select class='webex-select'><option value='blank'></option><option value=''>TRUE</option><option value='answer'>FALSE</option></select> \n\n:::\n\n::: {.callout-important collapse=\"true\"}\n## Extra: Arithmetics\n\nIf you need a maths refresher, I recommend checking the following pages:\n\n-   <https://www.mathsisfun.com/definitions/order-of-operations.html>\n\n-   <https://www.mathsisfun.com/algebra/introduction.html>\n:::\n\n### Variables\n\n> Forget-me-not.\n\nMost times, we want to store a certain value so that we can use it again later.\n\nWe can achieve this by creating **variables**.\n\n::: callout-tip\n#### Variable\n\nA **variable** holds one or more values and it's stored in the computer memory for later use.\n:::\n\nYou can create a variable by using the **assignment operator** `<-`.\n\nLet's assign the value `156` to the variable `my_num`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_num <- 156\n```\n:::\n\n\n<!-- Now, check the list of variables in the `Environment` tab of the top-right panel of RStudio. You should see the `my_num` variable and its value there. -->\n\nNow, you can just call the variable back when you need it! Write the following in the Console and press `ENTER`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_num\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 156\n```\n:::\n:::\n\n\nYou should see the value of `my_num` being printed in the console.\n\nA variable like `my_num` is called a **numeric vector**: i.e. a vector that contains a number (hence numeric).\n\n::: callout-tip\n#### Vector\n\nA **vector** is an R object that contains one or more values of the same type.\n:::\n\nA vector is a type of variable and a numeric vector is a type of vector. However, it's fine in most cases to use the word variable to mean vector (just note that a variable can also be something else than a vector; you will learn about other R objects from next week).\n\nLet's now try some operations using variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nincome <- 1200\nexpenses <- 500\nincome - expenses\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 700\n```\n:::\n:::\n\n\nSee? You can use math operators with variables too!\n\nAnd you can also go all the way with variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsavings <- income - expenses\n```\n:::\n\n\nNow check the value of `savings`...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsavings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 700\n```\n:::\n:::\n\n\nVectors can hold more than one item or value.\n\nJust use the combine `c()` function to create a vector containing multiple values.\n\nThe following are all numeric vectors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 6\n# Vector with 2 values\nb <- c(6, 8)\n# Vector with 3 values\nc <- c(6, 8, 42)\n```\n:::\n\n\n<!-- Check the list of variables in the `Environment` tab. You will see now that before the values of `two_i` and `three_i` you get the vector type `num` for numeric. (If the vector has only one value, you don't see the type in the `Enviroment` list but it is still of a specific type). -->\n\nYou can check the type of vector (called class in R) with the `class()` function: for example, `class(a)` should return `\"numeric\"`.\n\n::: callout-tip\n#### Numeric vector\n\nA **numeric vector** is a vector that holds one or more numeric values.\n:::\n\nNote that the following are the same:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 6\na\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nd <- c(6)\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nAnother important aspect of variables is that they are... **variable**! Meaning that once you assign a value to one variable, you can overwrite the value by assigning a new one to the same variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_num <- 88\nmy_num <- 63\nmy_num\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 63\n```\n:::\n:::\n\n\nWhat if you want to know which variables you have created so far? Easy: use the `ls()` function. Just write `ls()` in the console and press `ENTER`: a list of existing variables will be returned.\n\n::: callout-note\n#### Quiz 3\n\n\n**True or false?** \n\na. A vector is a type of variable. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select> \n\nb. Not all variables are vectors. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select> \n\nc. A numeric vector can only hold numeric values. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select> \n\n:::\n\n### Functions\n\n> R cannot function without... functions.\n\nWe have encoutered a few functions: `cat()`, `c()`, `class()` and `ls()`.\n\n::: callout-tip\n#### Function\n\nA **function** usually runs an operation on one or more specified **arguments**.\n:::\n\nA function in R has the form `function()` where:\n\n-   `function` is the name of the function, like `cat`.\n-   `()` are round parentheses, inside of which you write arguments, separated by commas.\n\nLet's see an example with the function `sum()` (can you guess what it does?):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(3, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n\nThe `sum()` function sums the numbers listed as arguments. Above, the arguments are `3` and `5`.\n\nAnd of course arguments can be vectors!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_nums <- c(3, 5, 7)\n\nsum(my_nums)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n```{.r .cell-code}\nmean(my_nums)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nSome functions work without specifying an argument, like `ls()`.\n\nYou can also nest functions one inside the other: the output of the \"lowest\" function is used as the argument of the function above. Try and untangle the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 10\nu <- 6\ni <- 7\no <- 2\n\ncat(mean(c(sum(y, u), sum(i, o))))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n12.5\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n#### Hint\n\n![](../img/nested-functions.png)\n:::\n\n::: callout-note\n#### Quiz 4\n\n\n**True or false?** \n\na. You can use functions within functions. <select class='webex-select'><option value='blank'></option><option value='answer'>TRUE</option><option value=''>FALSE</option></select> \n\nb. All function arguments must be specified. <select class='webex-select'><option value='blank'></option><option value=''>TRUE</option><option value='answer'>FALSE</option></select> \n\nc. All functions need at least one argument. <select class='webex-select'><option value='blank'></option><option value=''>TRUE</option><option value='answer'>FALSE</option></select> \n\n:::\n\n::: {.callout-important collapse=\"true\"}\n#### Extra: R vs Python\n\nIf you are familiar with Python, you will soon realise that R and Python, although they share many concepts and types of objects, they can differ substantially. This is because R is a **functional** programming language (based on *functions*) while Python is an **Object Oriented** programming language (based on *methods* applied on objects).\n\nGenerally speaking, functions look like `print(x)` while methods look like `x.print()`\n:::\n\n### String and logical vectors\n\n> Not just numbers.\n\nWe have seen that variables can hold numeric vectors. But vectors are not restricted to being numeric. They can also store **strings**.\n\nA string is basically a set of characters (a word, a sentence, a full text).\n\nIn R, strings have to be **quoted** using double quotes `\" \"`.\n\nChange the following strings to your name and surname. Remember to keep the double quotes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Stefano\"\nsurname <- \"Coretta\"\n\nname\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Stefano\"\n```\n:::\n:::\n\n\nStrings can be used as arguments in functions, like numbers can.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"My name is\", name, surname)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy name is Stefano Coretta\n```\n:::\n:::\n\n\nRemember that you can reuse the same variable name to override the variable value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nname <- \"Raj\"\n\ncat(\"My name is\", name, surname)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy name is Raj Coretta\n```\n:::\n:::\n\n\nYou can combine multiple strings into a **character vector**, using `c()`.\n\n::: callout-tip\n#### Character vector\n\nA **character vector** is a vector that holds one or more strings.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruit <- c(\"apple\", \"oranges\", \"bananas\")\nfruit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"apple\"   \"oranges\" \"bananas\"\n```\n:::\n:::\n\n\nCheck the Environment tab. Character vectors have `chr` before the values.\n\nAnother type of vector is one that contains either `TRUE` or `FALSE`. Vectors of this type are called **logical vectors** and they are listed as `logi` in the `Environment` tab.\n\n::: callout-tip\n#### Logical vector\n\nA **logical vector** is a vector that holds one or more `TRUE` or `FALSE` values.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngroceries <- c(\"apple\", \"flour\", \"margarine\", \"sugar\")\nin_pantry <- c(TRUE, TRUE, FALSE, TRUE)\n\ndata.frame(groceries, in_pantry)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"groceries\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"in_pantry\"],\"name\":[2],\"type\":[\"lgl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"apple\",\"2\":\"TRUE\"},{\"1\":\"flour\",\"2\":\"TRUE\"},{\"1\":\"margarine\",\"2\":\"FALSE\"},{\"1\":\"sugar\",\"2\":\"TRUE\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n`TRUE` and `FALSE` values must be written in all capitals and *without* double quotes (they are not strings!).\n\n(We will talk about data frames, another type of object in R, in the following weeks.)\n\n::: callout-note\n#### Quiz 5\n\n\na. Which of the following is **not** a character vector. <div class='webex-radiogroup' id='radio_EXHUUPECZN'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EXHUUPECZN\" value=\"\"></input> <span>`c(1, 2, \"43\")`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EXHUUPECZN\" value=\"\"></input> <span>`\"s\"`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EXHUUPECZN\" value=\"answer\"></input> <span>`c(apple)` (assuming `apple <- 45`)</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_EXHUUPECZN\" value=\"\"></input> <span>`c(letters)`</span></label></div>\nb. Which of the following is **not** a logical vector. <div class='webex-radiogroup' id='radio_TLXQQVXMUN'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_TLXQQVXMUN\" value=\"\"></input> <span>`c(T, T, F)`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_TLXQQVXMUN\" value=\"\"></input> <span>`TRUE`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_TLXQQVXMUN\" value=\"answer\"></input> <span>`\"FALSE\"`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_TLXQQVXMUN\" value=\"\"></input> <span>`c(FALSE)`</span></label></div>\n\n\n::: {.callout-tip collapse=\"true\"}\n#### Hint\n\nYou can use the `class()` function to check the type (\"class\") of a vector.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(c(1, 45))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(c(\"a\", \"b\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n:::\n\n::: {.callout-warning collapse=\"true\"}\n#### Explanation\n\n**5a**\n\n-   `c(1, 2, \"43\")` is a character vector because the last number `\"43\"` is a string (it's between double quotes!). A vector cannot have a mix of types of elements: they have to be all numbers or all strings or else, but not some numbers and some strings. Numbers are special in that if you include a number in a character vector without quoting it, it is automatically converted into a string. Try the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar <- c(\"a\", \"b\", \"c\")\nchar <- c(char, 1)\nchar\nclass(char)\n```\n:::\n\n\n-   `c(letters)` is a character vector because `letters` contains the letters of the alphabet as strings (this vector comes with base R).\n\n-   `c(apple)` is not a character vector because the variable `apple` holds a number, `45`!\n\n**5b**\n\n-   `\"FALSE\"` is **not** a logical vector because `FALSE` has been quoted (anything that is quoted is a string!).\n:::\n:::\n\n::: {.callout-important collapse=\"true\"}\n#### Extra: For-loops and if-else statements\n\nThis course does not cover programming in R in the strict sense, but if you are curious here's a short primer on for-loops and if-else statements in R.\n\n**For-loops**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfruits <- c(\"apples\", \"mangos\", \"durians\")\n\nfor (fruit in fruits) {\n  cat(\"I like\", fruit, \"\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nI like apples \nI like mangos \nI like durians \n```\n:::\n:::\n\n\n**If-else**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (fruit in fruits) {\n  if (grepl(\"n\", fruit)) {\n    cat(fruit, \"has an 'n'\", \"\\n\")\n  } else {\n    cat(fruit, \"does not have an 'n'\", \"\\n\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napples does not have an 'n' \nmangos has an 'n' \ndurians has an 'n' \n```\n:::\n:::\n\n:::\n\n## Summary\n\nYou made it! You completed this week's tutorial.\n\nHere's a summary of what you learnt.\n\n::: {.callout-note appearance=\"minimal\"}\n-   **R** is a programming language while **RStudio** is an IDE.\n\n-   **RStudio projects** are folders with an `.Rproj` file (you can see the name of the project you are currently in in the top-right corner of RStudio).\n\n-   You can perform mathematical operations with `+, -, *, /.`\n\n-   You can store values in **variables**.\n\n-   A typical object to be stored in a variable is a **vector**: there are different type of vectors, like **numeric**, **character** and **logical**.\n\n-   Functions are used to perform an operation on its arguments: `sum()` sums it's arguments, `mean()` calculates the mean and `cat()` prints the arguments.\n:::\n\n::: {.callout-important collapse=\"true\"}\n#### Extra: Programming in R\n\nIf you are interested in learning about programming in R, I recommend you go through Chapters 26-28 of the [R4DS](https://r4ds.hadley.nz/functions) book and the [Advanced R](https://adv-r.hadley.nz) book.\n\nNote that these topics are not covered in the course, nor will be assessed.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}