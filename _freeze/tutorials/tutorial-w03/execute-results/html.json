{
  "hash": "48393611781e3e1a779397fe2eca89d6",
  "result": {
    "markdown": "---\ntitle: \"DAL tutorial - Week 3\"\nsubtitle: \"Read data\"\neditor: visual\nformat: \n  html:\n    css: [webex.css]\n    include-after-body: [webex.js]\n---\n\n::: {.cell}\n\n:::\n\n\n## Some computer basics\n\nIn the tutorial last week you've been playing around with R, RStudio and R scripts.\n\n**But what if you want to import data in R?**\n\nEasy! You can use the `read_*()` functions to read your files into R. But before we dive in, let's first talk about some computer basics. (You can skip this section if it's too basic for you.)\n\n### Files, folder and file extensions\n\nFiles saved on your computer live in a specific place. For example, if you download a file from a browser (like Google Chrome, Safari or Firefox), the file is normally saved in the `Download` folder.\n\nBut where does the `Download` folder live? Usually, in your user folder! The user folder normally is the name of your account or a name you picked when you created your computer account. In my case, my user folder is simply called `ste`.\n\n::: callout-tip\n#### User folder\n\nThe **user folder** is the folder with the name of your account.\n:::\n\n::: {.callout-note collapse=\"true\"}\n#### How to find your user folder name\n\n**On macOS**\n\n-   Open the Finder Preferences.\n\n-   Go to `Sidebar`.\n\n-   The name next to the house icon is the name of your home folder.\n\n**On Windows**\n\n-   Right-click an empty area on the navigation panel in File Explorer.\n\n-   From the context menu, select the 'Show all folders' and your user profile will be added as a location in the navigation bar.\n:::\n\nSo, let's assume I download a file, let's say `big_data.csv`, in the `Download` folder of my user folder.\n\nNow we can represent the location of the `big_data.csv` file like so:\n\n```         \nste/\n└── Downloads/\n    └── big_data.csv\n```\n\nTo mark that `ste` and `Downloads` are folders, we add a final forward slash `/`. That simply means \"hey! I am a folder!\". `big_data.csv` is a file, so it doesn't have a final `/`.\n\nInstead, the file name `big_data.csv` has a **file extension**. The file extension is `.csv`. A file extension marks the type of file: in this the `big_data` file is a `.csv` file, a comma separated value file (we will see an example of what that looks like later).\n\nDifferent file type have different file extensions:\n\n-   Excel files: `.xlsx`.\n-   Plain text files: `.txt`.\n-   Images: `.png`, `.jpg`, `.gif`.\n-   Audio: `.mp3`, `.wav`.\n-   Video: `.mp4`, `.mov`, `.avi`.\n-   Etc...\n\n::: callout-tip\n#### File extension\n\nA file extension is a sequence of letters that indicates the type of a file and it's separated with a `.` from the file name.\n:::\n\n### File paths\n\nNow, we can use an alternative, more succinct way, to represent the location of the `big_data.csv`:\n\n`ste/Downloads/big_data.csv`\n\nThis is called a **file path**! It's the path through folders that lead you to the file. Folders are separated by `/` and the file is marked with the extension `.csv`.\n\n::: callout-tip\n#### File path\n\nA **file path** indicates the location of a file on a computer as a path through folders that lead you to the file.\n:::\n\nNow the million pound question: where does `ste/` live on my computer???\n\nUser folders are located in different places depending on the operating system you are using:\n\n-   On **macOS**: the user folder is in `/Users/`.\n\n    -   You will notice that there is a forward slash also before the name of the folder. That is because the `/Users/` folder is a top folder, i.e. there are no folders further up in the hierarchy of folders.\n    -   This means that the full path for the `big_data.csv` file on a computer running macOS would be: `/Users/ste/Downloads/big_data.csv`.\n\n-   On **Windows**: the user folder is in `C:/Users/`\n\n    -   You will notice that `C` is followed by a colon `:`. That is because `C` is a drive, which contains files and folders. `C:` is not contained by any other folder, i.e. there are no other folders above `C:` in the hierarchy of folders.\n    -   This means that the full path for the `big_data.csv` file on a Windows computer would be: `C:/Users/ste/Downloads/big_data.csv`.\n\nWhen a file path starts from a top-most folder, we call that path the **absolute** file path.\n\n::: callout-tip\n#### Absolute path\n\nAn **absolute path** is a file path that starts with a top-most folder.\n:::\n\nThere is another type of file paths, called **relative** paths. A relative path is a partial file path, relative to a specific folder. You will learn how to use relative paths below, when we will go through importing files in R using R scripts below.\n\nImporting files in R is very easy with the tidyverse packages. You just need to know the file type (very often the file extension helps) and the location of the file (i.e. the file path).\n\nThe next sections will teach you how to import data in R!\n\n::: callout-note\n#### Quiz 1\n\n\nWhich of the following is an absolute paths? <div class='webex-radiogroup' id='radio_IYMRRJPCJK'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_IYMRRJPCJK\" value=\"\"></input> <span>`Downloads/courses/dal/data/`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_IYMRRJPCJK\" value=\"answer\"></input> <span>`/Users/smruti/Downloads/data/files/`</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_IYMRRJPCJK\" value=\"\"></input> <span>`sascha/Documents/files_pdf/paper.pdf`</span></label></div>\n\n:::\n\n## Data types\n\n### Tabular data\n\n::: callout-tip\n#### Tabular data\n\nTabular data is data that has a form of a table: i.e. values structured in columns and rows.\n:::\n\nMost of the data we will be using in this course will be tabular and the files will be in the `.csv` format.\n\nThe **comma separated values format** (`.csv`) is the best format to save data in because it is basically a plain text file, it's quick to parse, and can be opened and edited with any software (plus, it's not a proprietary format).\n\nThis is what a `.csv` file looks like when you open it in a text editor (showing only the first few lines).\n\n``` txt\nGroup,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching\nL1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA\nL1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left\nL1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left\nL1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA\n```\n\nThe file contains tabular data (data that is structured as columns and rows, like a spreadsheet).\n\nTo separate the values of each column, a `.csv` file uses a comma `,` (hence the name \"comma separated values\") to separate the values in every row.\n\nThe first line of the file indicates the names of the columns of the table:\n\n``` txt\nGroup,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching\n```\n\nThere are 11 columns. The rest of the rows is the data, i.e. the values of each column separated by commas.\n\n``` txt\nL1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA\nL1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left\nL1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left\nL1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA\n```\n\nThis might look a bit confusing, but you will see later that, after importing this type of file, you can view it as a nice spreadsheet (as you would in Excel).\n\nAnother common type of tabular data file is **spreadsheets**, like spreadsheets created by Microsoft Excel or Apple Numbers. These are all proprietary formats that require you to have the software that were created with if you want to modify them.\n\nPortability and openness are important aspects of conducting ethical research, so that using open and non-proprietary file types makes your research more accessible and doesn't privilege those who have access to specific software (remember, R is free!).\n\nThere are also variations of the comma separated values type, like **tab separated values** files (`.tsv`, which uses tab characters instead of commas) and **fixed-width** files (usually `.txt`, where columns are separated by as many white spaces as needed so that the columns align).\n\n### Non-tabular data\n\nOf course, R can import also data that is not tabular, like map data and complex hierarchical data.\n\nWe will dip our toes in map data at the end of course, but virtually all of the data we will use will be tabular, just because that's the format you need to do data visualisation and analyses.\n\n### `.rds` files\n\nR has a special way of saving data: `.rds` files.\n\n`.rds` files allow you to save an R object to a file on your computer, so that you can read that file in when you need it.\n\nA common use for `.rds` files is to save tabular data that you have processed so that it can be readily used in many different scripts or even by other people.\n\nIn the following sections you will learn how to import (aka read) three types of data: `.csv`, Excel and `.rds` files.\n\n## Download the data files\n\nThroughout the course we will be using data files that come from linguistic research. You should download now the data files according to the following instructions\n\n**Please, follow these instructions carefully.**\n\n1.  Download the zip archive with all the data by right-clicking on the following link and download the file: [data.zip](../data/data.zip).\n\n2.  Unzip the zip file to extract the contents. (If you don't know how to do this, ask one of the tutors to help you!)\n\n3.  Create a folder called `data/` (the slash is there just to remind you that it's a folder, but you don't have to include it in the name) in the Quarto project you are using for the course.\n\n    1.  To create a folder, go to the Files tab of the bottom-right panel in RStudio.\n\n    2.  Make sure you are viewing the project's main folder.\n\n    3.  Click on the `New Folder` button, enter \"data\" in the text box and click `OK`\n\n4.  Move the contents of the `data.zip` archive into the `data/` folder.\n\n    1.  Open a Finder or File Explorer window.\n\n    2.  Navigate to the folder where you have extracted the zip file (it will very likely be the `Downloads/` folder).\n\n    3.  Copy the contents of the zip file.\n\n    4.  In Finder or File Explorer, navigate to the Quarto project folder, then the `data/` folder, and paste the contents in there. (You can also drag and drop if you prefer.)\n\nThe rest of the tutorial will assume that you have created a folder called `data/` in the Quarto project folder and that the files you downloaded are in that folder. The data folder should like something like this:\n\n```         \ndata/\n└── cameron2020/\n    └── gestures.csv\n└── coretta2018/\n    └── formants.csv\n    └── token-measures.csv\n└── ...\n```\n\nI recommend that you start being very organised with your files in other projects from now on, whether it's for this course or your dissertation or else. I also suggest to avoid overly nested structures (for example, avoid having one folder for each week for this course. Rather, save all data files in the `data/` folder).\n\n::: {.callout-note collapse=\"true\"}\n#### Organising your files\n\nThe Open Science Framework has the following recommendations that apply very well to any type of research project.\n\n-   Use **one folder** per project. This will also be your RStudio project folder.\n\n-   Separate **raw data** from **derived data**.\n\n-   Separate **code** from **data**.\n\n-   Make **raw data read-only**.\n\nTo learn more about this, check the OSF page [Organising files](https://help.osf.io/article/147-organizing-files).\n\nIn brief, what these recommendations mean is that you want a folder for your research project/course/else, and inside the folder two folders: one for data and one for code.\n\nThe `data/` folder could further contain `raw/` for raw data (data that should not be lost or changed, for example collected data or annotations) and `derived/` for data that derives from the raw data, for example through automated data processing.\n\nI usually also have a separate folder called `figs/` or `img/` where I save plots. Of course which folders you will have it's ultimately up to you and needs will vary depending on the project and field!\n:::\n\n## Import `.csv` files\n\nLet's start with data from this paper: Song et al. 2020. *Second language users exhibit shallow morphological processing*. DOI: [10.1017/S0272263120000170](https://doi.org/10.1017/S0272263120000170).\n\nThe study consisted of a lexical decision task in which participants where first shown a prime, followed by a target word for which they had to indicate whether it was a real word or a nonce word.\n\nThe prime word belonged to one of three possible groups (`Relation_type` in the data) each of which refers to the morphological relation of the prime and the target word:\n\n-   `Unrelated`: for example, *prolong* (assuming *unkindness* as target, \\[\\[un-kind\\]-ness\\]).\n\n-   `Constituent`: *unkind*.\n\n-   `NonConstituent`: *kindness*.\n\n### The tidyverse packages\n\nImporting `.csv` files is very easy. You can use the `read_csv()` function from a collection of R packages known as the [tidyverse](https://www.tidyverse.org).\n\nTo import data in R we will use the `read_csv()` function from the [readr](https://readr.tidyverse.org) package, one of the tidyverse packages.\n\nInstalling the tidyverse packages is easy: you just need to install the tidyverse package and that will take care of installing the most important packages in the collection (called the [\"core\" tidyverse packages](https://www.tidyverse.org/packages/)).\n\nGo ahead and install the tidyverse from the Packages tab.[^1]\n\n[^1]: Lab PCs should already have the tidyverse packages installed.\n\n### `read_csv()`\n\nThe `read_csv()` function from the readr package only requires you to specify the file path as a string (remember, strings are quoted between `\" \"`, for example `\"year_data.txt\"`). On my computer, the file path of `song2020/shallow.csv` is `/Users/ste/dal/data/song2020/shallow.csv`, but on your computer the file path will be different, of course.\n\nAlso, note that it is not enough to use the `read_csv()` function. You also must assign the output of the `read_csv()` function (i.e. the data we are reading) to a variable, using the assignment arrow `<-`, just like we were assigning values to variables in the previous weeks.\n\nAnd since the `read_csv()` is a function from the tidyverse, you first need to attach the tidyverse packages with `library(tidyverse)` (remember, you need to attach packages **only once** per session). This will attach the core tidyverse packages, including readr. Of course, you can also attach the individual packages directly: `library(readr)`. If you use `library(tidyverse)` there is no need to attach individual tidyverse packages.\n\nBefore reading the data, create a new R script named `tutorial_w03.R` and save it in the `code/` folder of your Quarto project.\n\nGenerally, you start the script with calls to `library()` to load all the packages you need for the script.\n\nNow we only need one package, tidyverse, but in most cases you will need more than one! The best practice is to attach all of packages first, in the top of your script. Please, get in the habit of doing this from now, so that you can keep your scripts tidy and pretty!\n\n::: callout-warning\nPlease, don't include `install.packages()` in your R scripts!\n\nRemember, you only have to install a package once, and you can just type it in the Console.\n\nBut **DO** include `library()` in your scripts.\n:::\n\nAt the top of `tutorial_w03.R`, write the following lines of code. Then run the code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nsong2020 <- read_csv(\"./data/song2020/shallow.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6500 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): Group, ID, List, Target, Critical_Filler, Word_Nonword, Relation_ty...\ndbl (3): ACC, RT, logRT\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nIf you look at the `Environment` tab, you will see `song2020` under `Data`.\n\nBut wait, what is that `\"./data/song2020/shallow.csv\"`? That's a **relative path**. We briefly mentioned relative paths above, but let's understand the details now. You will be able to view the data soon.\n\n### Relative paths\n\n::: callout-tip\n#### Relative path\n\nA **relative path** is a file path that is relative to a folder, which is represented by `./`\n:::\n\nWhen you are using R scripts in Quarto projects, the `./` folder paths are relative to is the project folder! This is true whichever the name of the folder/project and whichever it's location on your computer.\n\nFor example, if your project it's called `awesome_proj` and it's in `Downloads/stuff/`, then if you write `./data/results.csv` you really mean `Downloads/stuff/awesome_proj/data/results.csv`!\n\n**How does R know the path is relative to the project folder?**\n\nThat is because when working with Quarto projects, all relative paths are relative to the project folder (i.e. the folder with the `.Rproj` file)!\n\nThe folder which relative paths are relative to is called the **working directory** (directory is just another way of saying folder).\n\n::: callout-tip\n#### Working directory\n\nThe **working directory** is the folder which relative paths are relative to.\n\nWhen using RStudio projects, the working directory is the project folder.\n:::\n\nThe code `read_csv(\"./data/song2020/shallow.csv\")` above will work because you are using an RStudio project and inside the project folder there is a folder called `data/` and in it there's the `song2020/shallow.csv` file.\n\nSo from now on I encourage you to use Quarto projects, R scripts and relative paths always!\n\nThe benefit of doing so is that, if you move your project or rename it, or if you share the project with somebody, all the paths will just work because they are relative!\n\n::: {.callout-tip collapse=\"true\"}\n#### Get the working directory\n\nYou can get the current working directory with the `getwd()` command.\n\nRun it now in the Console! Is the returned path the project folder path?\n\nIf not, it might be that you are not working from a Quarto project. Check the top-right corner of RStudio: is the project name in there or do you see `Project (none)?`\n\nIf it's the latter, you are not in a Quarto project, but you are running R from somewhere else (meaning, the working directory is somewhere else). If so, close RStudio and open the project.\n:::\n\n### View the data\n\nNow we can finally view the data.\n\nThe easiest way is to click on the name of the data listed in the `Environment` tab, in the top-right panel of RStudio.\n\nYou will see a nicely formatted table, as you would in a programme like Excel.\n\nData tables in R (i.e. tabular, spread-sheet like data) are called **data frames** or **tibbles**.[^2]\n\n[^2]: A **tibble** is a special data frame. We will learn more about tibbles in the following weeks.\n\nThe `song2020` data frame contains 11 columns (called variables in the `Environment` tab). The 11 columns are the following:\n\n-   `Group`: `L1` vs `L2` speakers of English.\n-   `ID`: Subject unique ID.\n-   `List`: Word list (A to F).\n-   `Target`: Target word in the lexical decision trial.\n-   `ACC`: Lexical decision response accuracy (`0` incorrect response, `1` correct response).\n-   `RT`: Reaction times of response in milliseconds.\n-   `logRT`: Logged reaction times.\n-   `Critical_Filler`: Whether the trial was a `filler` or `critical`.\n-   `Word_Nonword`: Whether the Target was a real `Word` or a `Nonword`.\n-   `Relation_type`: The type of relation between prime and target word (`Unrelated`, `NonCostituent`, `Constituent`, `Phonological`).\n-   `Branching`: Constituent syntactic branching, `Left` and `Right` (shout out to Charlie Puth).\n\n::: callout-note\n#### Quiz 3\n\n\nHow many rows does `shallow` have? <div class='webex-radiogroup' id='radio_DWJIQGBMSK'><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_DWJIQGBMSK\" value=\"\"></input> <span>11</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_DWJIQGBMSK\" value=\"\"></input> <span>650</span></label><label><input type=\"radio\" autocomplete=\"off\" name=\"radio_DWJIQGBMSK\" value=\"answer\"></input> <span>6500</span></label></div>\n\n:::\n\n## Import Excel sheets\n\nTo read an Excel file we need first to attach the [readxl](https://readxl.tidyverse.org/index.html) package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n```\n:::\n\n\nThen we can use the `read_excel()` function. Let's read the file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlos2023 <- read_excel(\"./data/los2023/relatives.xlsx\")\n```\n:::\n\n\nNow you can view the tibble `los2023`.\n\nNote that if the Excel file has more than one sheet, you can specify the sheet number when reading the file (the default is `sheet = 1`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlos2023_2 <- read_excel(\"./data/los2023/relatives.xlsx\", sheet = 2)\n```\n:::\n\n\nThe second sheet in `los2023.xlx` contains the description of the columns in the first sheet.\n\n## Import `.rds` files\n\nAnother useful type of data files is a file type specifically designed for r: `.rds` files.\n\nUsually, each `.rds` file contains one R object, like one tibble.\n\nYou can read `.rds` files with the `readRDS()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglot_status <- readRDS(\"./data/coretta2022/glot_status.rds\")\n```\n:::\n\n\nAs always, you need to assign the output of the function to a variable, here `glot_status`.\n\n::: callout-tip\n#### Rds files\n\n`.Rds` files are a type of R file which can store any R object and save it on disk.\n\nR objects can be saved to an `.Rds` file with the `saveRDS()` function and they can be read with the `readRDS()` function.\n:::\n\nView the `glot_status` tibble now.\n\nIt is also very easy to save a tibble to an `.rds` file with the `saveRDS()` function.\n\nFor example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(song2020, \"./data/song2020/shallow.rds\")\n```\n:::\n\n\nThe first argument is the name of the tibble object and the second argument is the file path to save the object to.\n\n## Practice\n\n::: {.callout-note collapse=\"true\"}\n#### Practice 1\n\nRead the following files in R, making sure you use the right `read_*()` function.\n\n-   [koppensteiner2016/takete_maluma.txt](../data/koppensteiner2016/takete_maluma.txt) (a tab separated file)\n\n-   [pankratz2021/si.csv](../data/pankratz2021/si.csv)\n\n-   Go to <https://datashare.ed.ac.uk/handle/10283/4006> and download the file `conflict_data_.xlsx`. Read both sheets (\"conflict_data2\" and \"demographics\"). Any issues?\n:::\n\n## Summary\n\n::: {.callout-note appearance=\"minimal\"}\n-   You have learnt about **directories**, file **extensions** and file **paths**.\n\n-   You can import tabular data in R with the `read_*()` functions from the tidyverse package readr.\n\n-   You can view data in RStudio as spreadsheets.\n:::\n",
    "supporting": [
      "tutorial-w03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}