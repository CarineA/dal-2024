[
  {
    "objectID": "tutorials/tutorial-w03.html",
    "href": "tutorials/tutorial-w03.html",
    "title": "DAL tutorial - Week 3",
    "section": "",
    "text": "In the tutorial last week you’ve been playing around with R, RStudio and R scripts.\nBut what if you want to import data in R?\nEasy! You can use the read_*() functions to read your files into R. But before we dive in, let’s first talk about some computer basics. (You can skip this section if it’s too basic for you.)\n\n\nFiles saved on your computer live in a specific place. For example, if you download a file from a browser (like Google Chrome, Safari or Firefox), the file is normally saved in the Download folder.\nBut where does the Download folder live? Usually, in your user folder! The user folder normally is the name of your account or a name you picked when you created your computer account. In my case, my user folder is simply called ste.\n\n\n\n\n\n\nUser folder\n\n\n\nThe user folder is the folder with the name of your account.\n\n\n\n\n\n\n\n\nHow to find your user folder name\n\n\n\n\n\nOn macOS\n\nOpen the Finder Preferences.\nGo to Sidebar.\nThe name next to the house icon is the name of your home folder.\n\nOn Windows\n\nRight-click an empty area on the navigation panel in File Explorer.\nFrom the context menu, select the ‘Show all folders’ and your user profile will be added as a location in the navigation bar.\n\n\n\n\nSo, let’s assume I download a file, let’s say big_data.csv, in the Download folder of my user folder.\nNow we can represent the location of the big_data.csv file like so:\nste/\n└── Downloads/\n    └── big_data.csv\nTo mark that ste and Downloads are folders, we add a final forward slash /. That simply means “hey! I am a folder!”. big_data.csv is a file, so it doesn’t have a final /.\nInstead, the file name big_data.csv has a file extension. The file extension is .csv. A file extension marks the type of file: in this the big_data file is a .csv file, a comma separated value file (we will see an example of what that looks like later).\nDifferent file type have different file extensions:\n\nExcel files: .xlsx.\nPlain text files: .txt.\nImages: .png, .jpg, .gif.\nAudio: .mp3, .wav.\nVideo: .mp4, .mov, .avi.\nEtc…\n\n\n\n\n\n\n\nFile extension\n\n\n\nA file extension is a sequence of letters that indicates the type of a file and it’s separated with a . from the file name.\n\n\n\n\n\nNow, we can use an alternative, more succinct way, to represent the location of the big_data.csv:\nste/Downloads/big_data.csv\nThis is called a file path! It’s the path through folders that lead you to the file. Folders are separated by / and the file is marked with the extension .csv.\n\n\n\n\n\n\nFile path\n\n\n\nA file path indicates the location of a file on a computer as a path through folders that lead you to the file.\n\n\nNow the million pound question: where does ste/ live on my computer???\nUser folders are located in different places depending on the operating system you are using:\n\nOn macOS: the user folder is in /Users/.\n\nYou will notice that there is a forward slash also before the name of the folder. That is because the /Users/ folder is a top folder, i.e. there are no folders further up in the hierarchy of folders.\nThis means that the full path for the big_data.csv file on a computer running macOS would be: /Users/ste/Downloads/big_data.csv.\n\nOn Windows: the user folder is in C:/Users/\n\nYou will notice that C is followed by a colon :. That is because C is a drive, which contains files and folders. C: is not contained by any other folder, i.e. there are no other folders above C: in the hierarchy of folders.\nThis means that the full path for the big_data.csv file on a Windows computer would be: C:/Users/ste/Downloads/big_data.csv.\n\n\nWhen a file path starts from a top-most folder, we call that path the absolute file path.\n\n\n\n\n\n\nAbsolute path\n\n\n\nAn absolute path is a file path that starts with a top-most folder.\n\n\nThere is another type of file paths, called relative paths. A relative path is a partial file path, relative to a specific folder. You will learn how to use relative paths below, when we will go through importing files in R using R scripts below.\nImporting files in R is very easy with the tidyverse packages. You just need to know the file type (very often the file extension helps) and the location of the file (i.e. the file path).\nThe next sections will teach you how to import data in R!\n\n\n\n\n\n\nQuiz 1\n\n\n\nWhich of the following is an absolute paths?\n\n Downloads/courses/dal/data/ /Users/smruti/Downloads/data/files/ sascha/Documents/files_pdf/paper.pdf"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#some-computer-basics",
    "href": "tutorials/tutorial-w03.html#some-computer-basics",
    "title": "DAL tutorial - Week 3",
    "section": "",
    "text": "In the tutorial last week you’ve been playing around with R, RStudio and R scripts.\nBut what if you want to import data in R?\nEasy! You can use the read_*() functions to read your files into R. But before we dive in, let’s first talk about some computer basics. (You can skip this section if it’s too basic for you.)\n\n\nFiles saved on your computer live in a specific place. For example, if you download a file from a browser (like Google Chrome, Safari or Firefox), the file is normally saved in the Download folder.\nBut where does the Download folder live? Usually, in your user folder! The user folder normally is the name of your account or a name you picked when you created your computer account. In my case, my user folder is simply called ste.\n\n\n\n\n\n\nUser folder\n\n\n\nThe user folder is the folder with the name of your account.\n\n\n\n\n\n\n\n\nHow to find your user folder name\n\n\n\n\n\nOn macOS\n\nOpen the Finder Preferences.\nGo to Sidebar.\nThe name next to the house icon is the name of your home folder.\n\nOn Windows\n\nRight-click an empty area on the navigation panel in File Explorer.\nFrom the context menu, select the ‘Show all folders’ and your user profile will be added as a location in the navigation bar.\n\n\n\n\nSo, let’s assume I download a file, let’s say big_data.csv, in the Download folder of my user folder.\nNow we can represent the location of the big_data.csv file like so:\nste/\n└── Downloads/\n    └── big_data.csv\nTo mark that ste and Downloads are folders, we add a final forward slash /. That simply means “hey! I am a folder!”. big_data.csv is a file, so it doesn’t have a final /.\nInstead, the file name big_data.csv has a file extension. The file extension is .csv. A file extension marks the type of file: in this the big_data file is a .csv file, a comma separated value file (we will see an example of what that looks like later).\nDifferent file type have different file extensions:\n\nExcel files: .xlsx.\nPlain text files: .txt.\nImages: .png, .jpg, .gif.\nAudio: .mp3, .wav.\nVideo: .mp4, .mov, .avi.\nEtc…\n\n\n\n\n\n\n\nFile extension\n\n\n\nA file extension is a sequence of letters that indicates the type of a file and it’s separated with a . from the file name.\n\n\n\n\n\nNow, we can use an alternative, more succinct way, to represent the location of the big_data.csv:\nste/Downloads/big_data.csv\nThis is called a file path! It’s the path through folders that lead you to the file. Folders are separated by / and the file is marked with the extension .csv.\n\n\n\n\n\n\nFile path\n\n\n\nA file path indicates the location of a file on a computer as a path through folders that lead you to the file.\n\n\nNow the million pound question: where does ste/ live on my computer???\nUser folders are located in different places depending on the operating system you are using:\n\nOn macOS: the user folder is in /Users/.\n\nYou will notice that there is a forward slash also before the name of the folder. That is because the /Users/ folder is a top folder, i.e. there are no folders further up in the hierarchy of folders.\nThis means that the full path for the big_data.csv file on a computer running macOS would be: /Users/ste/Downloads/big_data.csv.\n\nOn Windows: the user folder is in C:/Users/\n\nYou will notice that C is followed by a colon :. That is because C is a drive, which contains files and folders. C: is not contained by any other folder, i.e. there are no other folders above C: in the hierarchy of folders.\nThis means that the full path for the big_data.csv file on a Windows computer would be: C:/Users/ste/Downloads/big_data.csv.\n\n\nWhen a file path starts from a top-most folder, we call that path the absolute file path.\n\n\n\n\n\n\nAbsolute path\n\n\n\nAn absolute path is a file path that starts with a top-most folder.\n\n\nThere is another type of file paths, called relative paths. A relative path is a partial file path, relative to a specific folder. You will learn how to use relative paths below, when we will go through importing files in R using R scripts below.\nImporting files in R is very easy with the tidyverse packages. You just need to know the file type (very often the file extension helps) and the location of the file (i.e. the file path).\nThe next sections will teach you how to import data in R!\n\n\n\n\n\n\nQuiz 1\n\n\n\nWhich of the following is an absolute paths?\n\n Downloads/courses/dal/data/ /Users/smruti/Downloads/data/files/ sascha/Documents/files_pdf/paper.pdf"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#the-data",
    "href": "tutorials/tutorial-w03.html#the-data",
    "title": "DAL tutorial - Week 3",
    "section": "5 The data",
    "text": "5 The data\nFor this tutorial, we will use the data from this paper: Song et al. 2020. Second language users exhibit shallow morphological processing. DOI: 10.1017/S0272263120000170.\nThe study consisted of a lexical decision task in which participants where first shown a prime, followed by a target word for which they had to indicate whether it was a real word or a nonce word.\nThe prime word belonged to one of three possible groups (Relation_type in the data) each of which refers to the morphological relation of the prime and the target word:\n\nUnrelated: for example, prolong (assuming unkindness as target, [[un-kind]-ness]).\nConstituent: unkind.\nNonConstituent: kindness.\n\nThe expectations are that\n\nLexical decisions for native English participants should be facilitated in the Constituent condition, but not in the Unrelated and NonConstituent conditions.\nLexical decisions for non-native English participants should be facilitated both in the Constituent and NonCostituent condition, but not in the Unrelated condition.\n\nWe can interpret “facilitated lexical decisions” as higher accuracy and shorter reaction times.\nIn section 2-4 of this tutorial you will learn about:\n\nThe data file format (a .csv file).\nHow to read data with the read_csv() function from the tidyverse packages and what packages are.\nHow to view the imported data.\n\n\n5.1 Download the data file\nPlease, follow these instructions carefully.\n\nDownload the file with the data by right-clicking on the following link and download the file: shallow.csv. (Note that tutorial files are also linked in the Course content page)\nCreate a folder called data/ (the slash is there just to remind you that it’s a folder, but you don’t have to include it in the name) in the RStudio project of the course.\n\nTo create a folder, go to the Files tab of the bottom-right panel in RStudio.\nMake sure you are viewing the project’s main folder.\nClick on the New Folder button, enter “data” in the text box and click OK\n\nMove the downloaded file into the data/ folder.\n\nOpen a Finder or File Explorer window.\nNavigate to the folder where you have saved the downloaded file (it will very likely be the Downloads/ folder).\nCopy the file.\nIn Finder or File Explorer, navigate to the RStudio project folder, then the data/ folder, and paste the file in there.\n\n\nThe rest of the tutorial will assume that you have created a folder called data/ in the RStudio project folder and that shallow.csv is in that folder.\nI recommend you to start being very organised with your files from now, whether it’s for this course or your dissertation or else. I also suggest to avoid overly nested structures (for example, avoid having one folder for each week for this course. Rather, save all data files in the data/ folder).\n\n\n\n\n\n\nOrganising your files\n\n\n\n\n\nThe Open Science Framework has the following recommendations that apply very well to any type of research project.\n\nUse one folder per project. This will also be your RStudio project folder.\nSeparate raw data from derived data.\nSeparate code from data.\nMake raw data read-only.\n\nTo learn more about this, check the OSF page Organising files.\nIn brief, what these recommendations mean is that you want a folder for your research project/course/else, and inside the folder two folders: one for data and one for code.\nThe data/ folder could further contain raw/ for raw data (data that should not be lost or changed, for example collected data or annotations) and derived/ for data that derives from the raw data, for example through automated data processing.\nI usually also have a separate folder called figs/ or img/ where I save plots. Of course which folders you will have it’s ultimately up to you and needs will vary depending on the project and field!\n\n\n\n\n\n5.2 About shallow.csv\nshallow.csv is a .csv file. It looks like this (the following is just an excerpt from the file, specifically the first 5 lines):\nThere are 11 columns.\nThen, the rest of the file contains the other rows of the table, with values for each of the 11 columns. Of course, separated by commas.\nThe shallow.csv file should be placed in the data/ folder of the course RStudio project.\nNow, let’s import the data!\nImporting .csv files is very easy. You can use the read_csv() function from a collection of R packages known as the tidyverse."
  },
  {
    "objectID": "tutorials/tutorial-w03.html#import-and-view-data",
    "href": "tutorials/tutorial-w03.html#import-and-view-data",
    "title": "QML tutorial - Week 3",
    "section": "3 Import and view data",
    "text": "3 Import and view data\n\n3.1 Import the data\nTo import data in R we will use the read_csv() function from the readr package, one of the tidyverse packages.\nThe read_csv() function only requires you to specify the file path as a string (remember, strings are quoted between \" \", for example \"year_data.txt\").\nOn my computer, the file path of shallow.csv is /Users/ste/qml/data/shallow.csv, but on your computer the file path will be different, of course.\nAlso, note that it is not enough to use the read_csv() function. You also must assign the output of the read_csv() function (i.e. the data we are reading) to a variable, using the assignment arrow &lt;-.\nAnd since the read_csv() is a function from the tidyverse, you first need to attach the tidyverse packages with library(tidyverse) (remember, you need to attach packages only once per session).\nThis will attach a set of the tidyverse packages that are commonly used in most data analysis applications, including readr. Of course, you can also attach the individual packages directly: library(readr). If you use library(tidyverse) there is no need to attach individual tidyverse packages.\nSo, putting all together, here’s the code. Remember to change the file path to match the path of the file on your computer. Run the code in the Console to read the data.\n\nlibrary(tidyverse)\n\n# CHANGE THE FILE PATH TO MATCH THE PATH ON YOUR COMPUTER\nshallow &lt;- read_csv(\"/Users/ste/qml/data/shallow.csv\")\n\nFantastic!\n\n\n3.2 View the data\nNow we can view the data.\nThe easiest way is to click on the name of the data listed in the Environment tab, in the top-right panel of RStudio.\nYou will see a nicely formatted table, as you would in a programme like Excel.\nData tables in R (i.e. spreadsheet-like data) are called data frames or tibbles.1\nThe shallow data frame contains 11 columns (called variables in the Environment tab). The 11 columns are the following:\n\nGroup: L1 vs L2 speakers of English.\nID: Subject unique ID.\nList: Word list (A to F).\nTarget: Target word in the lexical decision trial.\nACC: Lexical decision response accuracy (0 incorrect response, 1 correct response).\nRT: Reaction times of response in milliseconds.\nlogRT: Logged reaction times.\nCritical_Filler: Whether the trial was a filler or critical.\nWord_Nonword: Whether the Target was a real Word or a Nonword.\nRelation_type: The type of relation between prime and target word (Unrelated, NonCostituent, Constituent, Phonological).\nBranching: Constituent syntactic branching, Left and Right (shout out to Charlie Puth).\n\n\n\n\n\n\n\nQuiz 3\n\n\n\nHow many rows does shallow have?\n\n 11 650 6500\n\n\n\nGreat stuff! See how easy it was to import data?\n\n\n\n\n\n\nData formats\n\n\n\nMost of the data we will be using in this course will be in the .csv format.\nThe comma separated values format (.csv) is the best format to save data in because it is basically a plain text file, it’s quick to parse, and can be opened and edited with any software (plus, it’s not a proprietary format).\n\n\nHowever, you can easily import other file types as long as they are tabular or rectangular (i.e. spreadsheet-like), like Excel files.\n\n\n\n\n\n\nHow to import other file types\n\n\n\n\n\nSometimes though you might have to read other file types, for example Excel spreadsheets.\nIt’s easy to read other file type using the other read_*() functions:\n\nFor Excel files (i.e. files with a .xls or .xlsx extension), you need to attach the readxl package with library(readxl) and use the read_excel() function.\nUse read_tsv() from the readr package (installed with the tidyverse) to read tab separated values files (these have either the .txt or .tsv extensions.\nThe flexible read_delim() function allows you to read a wide variety of delimited files.\n\n\n\n\n\n\n\n\n\n\nPractice 1\n\n\n\n\n\nDownload the following files into the data folder. Read them in R, making sure you use the right read_*() function.\n\ntakete_maluma.txt (a tab separated file)\nRelatives.xlsx\nGo to https://datashare.ed.ac.uk/handle/10283/4006 and download the file conflict_data_.xlsx. Read both sheets (“conflict_data2” and “demographics”). Any issues?"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#footnotes",
    "href": "tutorials/tutorial-w03.html#footnotes",
    "title": "DAL tutorial - Week 3",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLab PCs should already have the tidyverse packages installed.↩︎\nA tibble is a special data frame. We will learn more about tibbles in the following weeks.↩︎"
  },
  {
    "objectID": "tutorials/tutorial-w05.html",
    "href": "tutorials/tutorial-w05.html",
    "title": "QML tutorial - Week 3",
    "section": "",
    "text": "Last week, you learnt how to use R scripts to save your code.\nKeeping track of the code you use for data analysis is a very important aspect of research project managing: not only the code is there if you need to rerun it later, but it allows your data analysis to be reproducible (i.e., it can be reproduced by you or other people in such a way that starting with the same data and code you get to the same results).\n\n\n\n\n\n\nReproducible research\n\n\n\nResearch is reproducible when the same data and same code return the same results.\n\n\nR scripts are great for writing code, and you can even document the code (add explanations or notes) with comments (i.e. lines that start with #).\nBut for longer text or complex data analysis reports, R scripts can be a bit cumbersome.\nA solution to this is using Rmarkdown files (they have the .Rmd extension).\n\n\nRmarkdown is a file format that allows you to mix code and formatted text in the same file.\nThis means that you can write dynamic reports using Rmd files: dynamic reports are just like analysis reports (i.e. they include formatted text, plots, tables, code output, code, etc…) but they are dynamic in the sense that if, for example, data or code changes, you can just rerun the report Rmd file and all code output (plots, tables, etc…) is updated accordingly!\nYou can watch this short video for a quick tour.\n\n\n\n\n\n\n\nDynamic reports in R Markdown\n\n\n\nR Markdown is a file type with extension .Rmd in which you can write formatted text and code together.\nR Markdown can be used to generate dynamic reports: these are files that are generated automatically from the R Markdown source, ensuring data and results in the report are always up to date.\n\n\n\n\n\nR comments in R scripts cannot be formatted (for example, you can’t make bold or italic texts).\nText in Rmd files can be fully formatted using a simple but powerful mark-up language called markdown.\nYou don’t have to learn markdown all in one go, so I encourage you to just learn it bit by bit, in your time. You can look at the the Markdown Guide for an in-depth intro and/or dive in the Markdown Tutorial for a hands-on approach.\nA few quick pointers (you can test them in the Markdown Live Preview):\n\nText can be made italics by enclosing it between single stars: *this text is in italics*.\nYou can make text bold with two stars: **this text is bold!**.\nHeadings are created with #: # This is a level-1 heading. ## This is a level-2 heading.\n\n\n\n\n\n\n\nMark-up, Markdown\n\n\n\nA mark-up language is a text-formatting system consisting of symbols or keywords that control the structure, formatting or relationships of textual elements. The most common mark-up languages are HTML, XML and TeX.\nMarkdown is a simple yet powerful mark-up language.\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen working through these tutorials, always make sure you are in the course RStudio Project you just created.\nYou know you are in an RStudio Project because you can see the name of the Project in the top-right corner of RStudio, next to the light-blue cube icon.\nIf you see Project (none) in the top-right corner, that means you are not in an RStudio Project.\nTo make sure you are in the RStudio project, you can open the project by going to the project folder in File Explorer (Win) or Finder (macOS) and double click on the .Rproj file.\n\n\nTo create a new Rmd file, just click on the New file button, then R Markdown.... (If you are asked to install/update packages, do so.)\n\nA window will open. Add a title of your choice and your name, then click OK.\n\nA new Rmd file will be created and will open in the File Editor panel in RStudio.\nNote that creating an Rmd file does not automatically saves it on your computer. To do so, either use the keyboard short-cut CMD+S/CTRL+S or click on the floppy disk icon in the menu below the file tab.\n\nSave the file inside the code/ folder with the following name: tutorial-w03.Rmd.\nRemember that all the files of your RStudio project don’t live inside RStudio but on your computer. So you can always access them from the Finder or File Explorer!\n\n\n\nAn Rmd file usually has three main parts:\n\nThe preamble (green).\nCode chunks (orange).\nText (blue).\n\n\nEach Rmd file has to start with a preamble, but you can include as many code chunks and as much text as you wish, in any order.\n\n\n\n\n\n\nR Markdown: Preamble\n\n\n\nThe preamble of an .Rmd file contains a list of key: value pairs, used to specify settings or document info like the title and author.\nPreambles start and end with three dashes ---.\n\n\n\n\n\n\n\n\nR Markdown: Code chunks\n\n\n\nCode chunks start and end with three back-ticks ``` and they contain code.\nSettings can be specified between curly brackets {} on the first ``` line: for example {r chunk-name, eval=FALSE}. r indicates that the code is R code.\n\n\n\n\n\nYou can render an Rmd file into a nicely formatted HTML file.\nTo render an Rmd file, just click on the Knit button and an HTML file will be created and saved in the same location of the Rmd file.\n\nIt will also be shown in the Viewer pane (like in the picture below) or in a new window (you can set this option in the RStudio preferences &gt; R Markdown &gt; Basics &gt; Show output preview in…).\n\nRendering Rmd files is not restricted to HTML, but also PDFs and even Word documents!\nThis is very handy when you are writing an analysis report you need to share with others.\n\n\n\n\n\n\nR Markdown: Rendering\n\n\n\nRmd files can be rendered into other formats, like HTML, PDF and Word documents.\n\n\n\n\n\nThe first code chunk in an Rmd file is a special one: it’s called setup and it’s where you attach all the packages needed for running the code in the file. (You can find the name of a code chunk—or define one yourself!—in the first line of a code block: ```{r chunk-name}). The first code chunk of an Rmd file should always be named setup.\nThe setup code chunk also has special code from the knitr package. The knitr package is what allows you to run R code from Rmd files.\nThe line knitr::opts_chunk$set(echo = TRUE) sets the option echo to TRUE. The echo option let’s you decide whether you want the R code printed (echoed) in the rendered Rmd file. When echo = TRUE the code is printed, when echo = FALSE the code is not printed.\nNow go ahead and add library(tidyverse) in the line below the knitr::opts_chunk line.\n\n\n\n\n\n\nRunning code\n\n\n\nTo run the code of a code chunk you can use different approaches:\n\nClick on the green arrow to the right of the code chunk to run the entire code chunk.\nAlternatively, place the text cursor inside the code chunk and press CMD/CTRL + SHIFT + ENTER.\nYou can also run line by line as you do in an R script by placing the text cursor on the line you want to run and press CMD/CTRL + ENTER.\n\n\n\nNow delete everything after the setup code chunk and write a new level-2 heading after the chunk with the name “Plotting basics”. (Remember to leave an empty line between the chunk and the heading.)\n\nYou will use this Rmd file to write text and code for this tutorial. To insert a new code chunk, you can click on the Insert a new code chunk button and then select R, or you can press OPT/ALT + CMD/CTRL + I.\n\nA new R code chunk will be inserted at the text cursor position."
  },
  {
    "objectID": "tutorials/tutorial-w05.html#rmarkdown",
    "href": "tutorials/tutorial-w05.html#rmarkdown",
    "title": "QML tutorial - Week 3",
    "section": "",
    "text": "Last week, you learnt how to use R scripts to save your code.\nKeeping track of the code you use for data analysis is a very important aspect of research project managing: not only the code is there if you need to rerun it later, but it allows your data analysis to be reproducible (i.e., it can be reproduced by you or other people in such a way that starting with the same data and code you get to the same results).\n\n\n\n\n\n\nReproducible research\n\n\n\nResearch is reproducible when the same data and same code return the same results.\n\n\nR scripts are great for writing code, and you can even document the code (add explanations or notes) with comments (i.e. lines that start with #).\nBut for longer text or complex data analysis reports, R scripts can be a bit cumbersome.\nA solution to this is using Rmarkdown files (they have the .Rmd extension).\n\n\nRmarkdown is a file format that allows you to mix code and formatted text in the same file.\nThis means that you can write dynamic reports using Rmd files: dynamic reports are just like analysis reports (i.e. they include formatted text, plots, tables, code output, code, etc…) but they are dynamic in the sense that if, for example, data or code changes, you can just rerun the report Rmd file and all code output (plots, tables, etc…) is updated accordingly!\nYou can watch this short video for a quick tour.\n\n\n\n\n\n\n\nDynamic reports in R Markdown\n\n\n\nR Markdown is a file type with extension .Rmd in which you can write formatted text and code together.\nR Markdown can be used to generate dynamic reports: these are files that are generated automatically from the R Markdown source, ensuring data and results in the report are always up to date.\n\n\n\n\n\nR comments in R scripts cannot be formatted (for example, you can’t make bold or italic texts).\nText in Rmd files can be fully formatted using a simple but powerful mark-up language called markdown.\nYou don’t have to learn markdown all in one go, so I encourage you to just learn it bit by bit, in your time. You can look at the the Markdown Guide for an in-depth intro and/or dive in the Markdown Tutorial for a hands-on approach.\nA few quick pointers (you can test them in the Markdown Live Preview):\n\nText can be made italics by enclosing it between single stars: *this text is in italics*.\nYou can make text bold with two stars: **this text is bold!**.\nHeadings are created with #: # This is a level-1 heading. ## This is a level-2 heading.\n\n\n\n\n\n\n\nMark-up, Markdown\n\n\n\nA mark-up language is a text-formatting system consisting of symbols or keywords that control the structure, formatting or relationships of textual elements. The most common mark-up languages are HTML, XML and TeX.\nMarkdown is a simple yet powerful mark-up language.\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nWhen working through these tutorials, always make sure you are in the course RStudio Project you just created.\nYou know you are in an RStudio Project because you can see the name of the Project in the top-right corner of RStudio, next to the light-blue cube icon.\nIf you see Project (none) in the top-right corner, that means you are not in an RStudio Project.\nTo make sure you are in the RStudio project, you can open the project by going to the project folder in File Explorer (Win) or Finder (macOS) and double click on the .Rproj file.\n\n\nTo create a new Rmd file, just click on the New file button, then R Markdown.... (If you are asked to install/update packages, do so.)\n\nA window will open. Add a title of your choice and your name, then click OK.\n\nA new Rmd file will be created and will open in the File Editor panel in RStudio.\nNote that creating an Rmd file does not automatically saves it on your computer. To do so, either use the keyboard short-cut CMD+S/CTRL+S or click on the floppy disk icon in the menu below the file tab.\n\nSave the file inside the code/ folder with the following name: tutorial-w03.Rmd.\nRemember that all the files of your RStudio project don’t live inside RStudio but on your computer. So you can always access them from the Finder or File Explorer!\n\n\n\nAn Rmd file usually has three main parts:\n\nThe preamble (green).\nCode chunks (orange).\nText (blue).\n\n\nEach Rmd file has to start with a preamble, but you can include as many code chunks and as much text as you wish, in any order.\n\n\n\n\n\n\nR Markdown: Preamble\n\n\n\nThe preamble of an .Rmd file contains a list of key: value pairs, used to specify settings or document info like the title and author.\nPreambles start and end with three dashes ---.\n\n\n\n\n\n\n\n\nR Markdown: Code chunks\n\n\n\nCode chunks start and end with three back-ticks ``` and they contain code.\nSettings can be specified between curly brackets {} on the first ``` line: for example {r chunk-name, eval=FALSE}. r indicates that the code is R code.\n\n\n\n\n\nYou can render an Rmd file into a nicely formatted HTML file.\nTo render an Rmd file, just click on the Knit button and an HTML file will be created and saved in the same location of the Rmd file.\n\nIt will also be shown in the Viewer pane (like in the picture below) or in a new window (you can set this option in the RStudio preferences &gt; R Markdown &gt; Basics &gt; Show output preview in…).\n\nRendering Rmd files is not restricted to HTML, but also PDFs and even Word documents!\nThis is very handy when you are writing an analysis report you need to share with others.\n\n\n\n\n\n\nR Markdown: Rendering\n\n\n\nRmd files can be rendered into other formats, like HTML, PDF and Word documents.\n\n\n\n\n\nThe first code chunk in an Rmd file is a special one: it’s called setup and it’s where you attach all the packages needed for running the code in the file. (You can find the name of a code chunk—or define one yourself!—in the first line of a code block: ```{r chunk-name}). The first code chunk of an Rmd file should always be named setup.\nThe setup code chunk also has special code from the knitr package. The knitr package is what allows you to run R code from Rmd files.\nThe line knitr::opts_chunk$set(echo = TRUE) sets the option echo to TRUE. The echo option let’s you decide whether you want the R code printed (echoed) in the rendered Rmd file. When echo = TRUE the code is printed, when echo = FALSE the code is not printed.\nNow go ahead and add library(tidyverse) in the line below the knitr::opts_chunk line.\n\n\n\n\n\n\nRunning code\n\n\n\nTo run the code of a code chunk you can use different approaches:\n\nClick on the green arrow to the right of the code chunk to run the entire code chunk.\nAlternatively, place the text cursor inside the code chunk and press CMD/CTRL + SHIFT + ENTER.\nYou can also run line by line as you do in an R script by placing the text cursor on the line you want to run and press CMD/CTRL + ENTER.\n\n\n\nNow delete everything after the setup code chunk and write a new level-2 heading after the chunk with the name “Plotting basics”. (Remember to leave an empty line between the chunk and the heading.)\n\nYou will use this Rmd file to write text and code for this tutorial. To insert a new code chunk, you can click on the Insert a new code chunk button and then select R, or you can press OPT/ALT + CMD/CTRL + I.\n\nA new R code chunk will be inserted at the text cursor position."
  },
  {
    "objectID": "tutorials/tutorial-w05.html#data-transformation",
    "href": "tutorials/tutorial-w05.html#data-transformation",
    "title": "QML tutorial - Week 3",
    "section": "2 Data transformation",
    "text": "2 Data transformation\nData transformation is a fundamental aspect of data analysis.\nAfter the data you need to use is imported into R, you will have to filter rows, create new columns, or join data frames, among many other transformation operations.\nIn this tutorial we will learn how to obtain summary measures and how to count occurrences using the summarise() and count() functions.\n\n2.1 Summary measures\nDuring the lecture, we have learnt two types of measures.\n\n\n\n\n\n\nSummary measures\n\n\n\nMeasures of central tendency (mean, median, mode) indicate the typical or central value of a sample.\nMeasures of dispersion (min-max, range, standard deviation) indicate the dispersion of the sample values around the central tendency value.\n\n\nWhen you work with data, you always want to get summary measures for most of the variables in the data.\nData reports usually include summary measures. It is also important to understand which summary measure is appropriate for which type of variable.\nWe have covered this in the lecture, so we won’t go over it again here. Instead, you will learn how to obtain summary measures using the summarise() function from the dplyr tidyverse package.\nsummarise() takes at least two arguments:\n\nThe data frame to summarise.\nOne or more summary functions.\n\nFor example, let’s get the mean the reaction time column RT. Easy!\n\nsummarise(shallow, RT_mean = mean(RT))\n\nGreat! The mean reaction times of the entire sample is 867 ms.\nWhat if we want also the standard deviation? Easy!\n\nsummarise(shallow, RT_mean = mean(RT), RT_sd = sd(RT))\n\n\n# This is a comment. Let's add 6 + 3.\n6 + 3\n\nNow we know that reaction times are on average 867 ms long and have a standard deviation of about 293 ms (rounded to the nearest integer).\nLet’s go all the way and also get the minimum and maximum RT values.\n\nsummarise(\n  shallow,\n  RT_mean = mean(RT), RT_sd = sd(RT),\n  RT_min = min(RT), RT_max = max(RT)\n)\n\nFab! When writing a data report, you could write something like this.\n\nReaction times are on average 867 ms long (SD = 293 ms), with values ranging from 0 to 1994 ms.\n\nWe will learn more about standard deviations from Week 4 on, but for now just think of this as a relative measure of how dispersed the data are around the mean: the higher the SD, the greater the dispersion around the mean, i.e. the greater the variability in the data.\nWhen required, you can use the median() function to calculate the median, instead of the mean(). Go ahead and calculate the median reaction times in the data. Is it similar to the mean?\n\n\n\n\n\n\nQuiz 5\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nCheck the documentation of ?mean.\n\n\n\n\n\nNote that R has a mode() function, but alas this is not the statistical mode. To get the mode of a categorical variable you can just count the occurrences of the values of that variable and the value that occurs the most is the mode!\nKeep reading to learn how to count occurrences.\n\n\n2.2 Count occurrences\nWe can use the count() function from the dplyr tidyverse package to count the number of occurrences for each value of a specific column. Let’s count how many trials are correct, i.e. let’s count occurrences in the ACC column.\nAccuracy has been coded with 0 for incorrect and 1 for correct. We will see how this is not an ideal, although very common way, of coding binary variables. For now let’s keep it as is.\nThe function count() takes the name of tibble and the name of column you want to count values in.\n\ncount(shallow, ACC)\n\nHow many correct responses are there in the shallow tibble?\nNote that you can add multiple column names, separated by commas, to get counts for the combinations of values of each column.\nTry to get counts of the combination of ACC and Group (L1 vs L2 participants). Replace ... with the right code.\n\ncount(shallow, ...)\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nIn count(), include the names of the two columns you want to get counts of, separated by commas.\n\n\n\nAre there differences in accuracy between the L1 and L2 group?\n\n\n2.3 Grouping data\nSometimes you might want to get summary measures for one variable depending on different values of another variable.\nYou can use the group_by() function from the dplyr tidyverse package, together with summarise() to achieve that. Let’s see how it works.\n\ngroup_by(shallow, Group) %&gt;%\n  summarise(\n    RT_mean = mean(RT),\n    RT_sd = sd(RT)\n  )\n\nThe group_by() function takes at least two arguments:\n\nThe name of the tibble to group.\nThe name of the columns to group the tibble by, separated by commas.\n\nHere we are grouping shallow by Group.\nIf you are baffled by that %&gt;%, keep on reading.\n\n\n2.4 What the pipe?!\nWait, what is that thing, %&gt;%?\nIt’s called a pipe. Think of a pipe as a teleporter.\nIn the code above we are chaining two functions together using the pipe opeartor %&gt;%. The output of the first function (group_by()) is “teleported” into the second function summarise().\nThe pipe %&gt;% teleports the output of the preceding function as the first argument of the following function. The output of group_by is a (grouped) tibble, and summarise() needs a tibble as its first argument.\nThat’s why the code above works!\nIn fact, you can even use a pipe for the tibble of group_by(), like so:\n\nshallow %&gt;%\n  group_by(Group) %&gt;%\n    summarise(\n      RT_mean = mean(RT),\n      RT_sd = sd(RT)\n    )\n\nYou see that the output of the code is the same here as it is above.\nFor comparison, this is what the code would look like without the pipe.\n\ngrouped_shallow &lt;- group_by(shallow, Group)\n\nsummarise(\n  grouped_shallow,\n  RT_mean = mean(RT),\n  RT_sd = sd(RT)\n)\n\nDon’t worry too much if the concept of the pipe is not clear yet. It should become clearer later.\n\n\n\n\n\n\nQuiz 6\n\n\n\n\n\n\n\n\n\nHint\n\n\n\n\n\nFor 6b., check the documentation of ?summarise.\n\n\n\n\n\n\n\n\n\n\n\nPractice 2\n\n\n\n\n\n\nGo to https://github.com/stefanocoretta/infant-gestures and download the gestures.csv file in the data/ folder. This is data from the paper [A Cross-Cultural Analysis of Early Prelinguistic Gesture Development and Its Relationship to Language Development](https://doi.org/10.1111/cdev.13406).\nRead the file in R.\nCalculate the following:\n\nMeasure of central tendency and dispersion for the count column (it contains the number of gestures performed by each child in different tasks).\nMeasure of central tendency and dispersion for the countcolumn grouped by month (the child’s age).\nTotal number of gestures by children (dyad).\nNumber of children by background.\n\nWrite a short paragraph where you report the measures. You can right this as comments in your R script. For examples, see above.\n\n\n\n\n\n\n\nHint\n\n\n\n\n\n\nTo calculate the total number of gestures by children, you need the sum() function.\nTo calculate the number of children by background, you need the distinct() function.\n\n\n\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\nHave you tried doing the exercise and couldn’t work it out?\nThe you can check the code solution here…\n\n\n\n\n\n\nCode\n\n\n\n\n\ngestures %&gt;%\n  summarise(\n    count_med = median(count, na.rm = TRUE),\n    count_min = min(count, na.rm = TRUE),\n    count_max = max(count, na.rm = TRUE),\n    count_range = count_max - count_min\n  )\n\ngestures %&gt;%\n  group_by(months) %&gt;%\n  summarise(\n    count_med = median(count, na.rm = TRUE),\n    count_min = min(count, na.rm = TRUE),\n    count_max = max(count, na.rm = TRUE),\n    count_range = count_max - count_min\n  )\n\ngestures %&gt;%\n  group_by(dyad) %&gt;%\n  summarise(\n    count_tot = sum(count)\n  )\n\ngestures %&gt;%\n  distinct(background, dyad) %&gt;%\n  count(background)"
  },
  {
    "objectID": "tutorials/tutorial-w05.html#summary",
    "href": "tutorials/tutorial-w05.html#summary",
    "title": "QML tutorial - Week 3",
    "section": "3 Summary",
    "text": "3 Summary\nThat’s all for this week!\n\n\n\n\n\n\nR Markdown\n\nR Markdown can be used to create dynamic and reproducible reports.\nMark-up languages are text-formatting systems that specify text formatting and structure using symbols or keywords. Markdown is the mark-up language R Markdown is based on.\nThe main parts of an .Rmd file are the preamble, text and code chunks.\n\nPlotting\n\nggplot2 is a plotting package from the tidyverse.\n\nTo create a basic plot, you use the ggplot() function and specify data and mapping.\nThe aes() function allows you to specify aesthetics (like axes, colours, …) in the mapping argument.\nGeometries map data values onto shapes in the plot. All geometry functions are of the type geom_*().\n\nScatter plots are created with geom_point() and can be used with two numeric variables.\nBar charts are created with geom_bar() and can be used to show the counts of different levels of a categorical variable.\nStacked bar charts are created by specifying the fill aesthetic and can be used to show counts grouped by a second categorical variable.\nStacked bar charts showing proportions can be created with the argument position = \"fill\" in geom_bar().\nFaceting allows you to split the plot in different panels, based on other variables in the data. Faceting is achieved with facet_grid().\n\n\n\n\nNext week, we will start learning about statistical modelling and while doing that you will also learn how to create density and violin plots and how to customise legends, titles and labels!"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#data-types",
    "href": "tutorials/tutorial-w03.html#data-types",
    "title": "DAL tutorial - Week 3",
    "section": "2 Data types",
    "text": "2 Data types\n\n2.1 Tabular data\n\n\n\n\n\n\nTabular data\n\n\n\nTabular data is data that has a form of a table: i.e. values structured in columns and rows.\n\n\nMost of the data we will be using in this course will be tabular and the files will be in the .csv format.\nThe comma separated values format (.csv) is the best format to save data in because it is basically a plain text file, it’s quick to parse, and can be opened and edited with any software (plus, it’s not a proprietary format).\nThis is what a .csv file looks like when you open it in a text editor (showing only the first few lines).\nGroup,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching\nL1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA\nL1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left\nL1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left\nL1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA\nThe file contains tabular data (data that is structured as columns and rows, like a spreadsheet).\nTo separate the values of each column, a .csv file uses a comma , (hence the name “comma separated values”) to separate the values in every row.\nThe first line of the file indicates the names of the columns of the table:\nGroup,ID,List,Target,ACC,RT,logRT,Critical_Filler,Word_Nonword,Relation_type,Branching\nThere are 11 columns. The rest of the rows is the data, i.e. the values of each column separated by commas.\nL1,L1_01,A,banoshment,1,423,6.0474,Filler,Nonword,Phonological,NA\nL1,L1_01,A,unawareness,1,603,6.4019,Critical,Word,Unrelated,Left\nL1,L1_01,A,unholiness,1,739,6.6053,Critical,Word,Constituent,Left\nL1,L1_01,A,bictimize,1,510,6.2344,Filler,Nonword,Phonological,NA\nThis might look a bit confusing, but you will see later that, after importing this type of file, you can view it as a nice spreadsheet (as you would in Excel).\nAnother common type of tabular data file is spreadsheets, like spreadsheets created by Microsoft Excel or Apple Numbers. These are all proprietary formats that require you to have the software that were created with if you want to modify them.\nPortability and openness are important aspects of conducting ethical research, so that using open and non-proprietary file types makes your research more accessible and doesn’t privilege those who have access to specific software (remember, R is free!).\nThere are also variations of the comma separated values type, like tab separated values files (.tsv, which uses tab characters instead of commas) and fixed-width files (usually .txt, where columns are separated by as many white spaces as needed so that the columns align).\n\n\n2.2 Non-tabular data\nOf course, R can import also data that is not tabular, like map data and complex hierarchical data.\nWe will dip our toes in map data at the end of course, but virtually all of the data we will use will be tabular, just because that’s the format you need to do data visualisation and analyses.\n\n\n2.3 .rds files\nR has a special way of saving data: .rds files.\n.rds files allow you to save an R object to a file on your computer, so that you can read that file in when you need it.\nA common use for .rds files is to save tabular data that you have processed so that it can be readily used in many different scripts or even by other people.\nIn the following sections you will learn how to import (aka read) three types of data: .csv, Excel and .rds files."
  },
  {
    "objectID": "tutorials/tutorial-w03.html#import-data",
    "href": "tutorials/tutorial-w03.html#import-data",
    "title": "DAL tutorial - Week 3",
    "section": "3 Import data",
    "text": "3 Import data\nTo import data in R we will use the read_csv() function from the readr package, one of the tidyverse packages.\nThe read_csv() function only requires you to specify the file path as a string (remember, strings are quoted between \" \", for example \"year_data.txt\").\nOn my computer, the file path of shallow.csv is /Users/ste/qml/data/shallow.csv, but on your computer the file path will be different, of course.\nAlso, note that it is not enough to use the read_csv() function. You also must assign the output of the read_csv() function (i.e. the data we are reading) to a variable, using the assignment arrow &lt;-.\nAnd since the read_csv() is a function from the tidyverse, you first need to attach the tidyverse packages with library(tidyverse) (remember, you need to attach packages only once per session).\nThis will attach a set of the tidyverse packages that are commonly used in most data analysis applications, including readr. Of course, you can also attach the individual packages directly: library(readr). If you use library(tidyverse) there is no need to attach individual tidyverse packages.\nSo, putting all together, here’s the code. Remember to change the file path to match the path of the file on your computer. Run the code in the Console to read the data.\n\nlibrary(tidyverse)\n\n# CHANGE THE FILE PATH TO MATCH THE PATH ON YOUR COMPUTER\nshallow &lt;- read_csv(\"/Users/ste/qml/data/shallow.csv\")\n\nFantastic!\n\n3.1 View the data\nNow we can view the data.\nThe easiest way is to click on the name of the data listed in the Environment tab, in the top-right panel of RStudio.\nYou will see a nicely formatted table, as you would in a programme like Excel.\nData tables in R (i.e. spreadsheet-like data) are called data frames or tibbles.1\nThe shallow data frame contains 11 columns (called variables in the Environment tab). The 11 columns are the following:\n\nGroup: L1 vs L2 speakers of English.\nID: Subject unique ID.\nList: Word list (A to F).\nTarget: Target word in the lexical decision trial.\nACC: Lexical decision response accuracy (0 incorrect response, 1 correct response).\nRT: Reaction times of response in milliseconds.\nlogRT: Logged reaction times.\nCritical_Filler: Whether the trial was a filler or critical.\nWord_Nonword: Whether the Target was a real Word or a Nonword.\nRelation_type: The type of relation between prime and target word (Unrelated, NonCostituent, Constituent, Phonological).\nBranching: Constituent syntactic branching, Left and Right (shout out to Charlie Puth).\n\n\n\n\n\n\n\nQuiz 3\n\n\n\nHow many rows does shallow have?\n\n 11 650 6500\n\n\n\n\n\n\n\n\n\nHow to import other file types\n\n\n\n\n\nSometimes though you might have to read other file types, for example Excel spreadsheets.\nIt’s easy to read other file type using the other read_*() functions:\n\nFor Excel files (i.e. files with a .xls or .xlsx extension), you need to attach the readxl package with library(readxl) and use the read_excel() function.\nUse read_tsv() from the readr package (installed with the tidyverse) to read tab separated values files (these have either the .txt or .tsv extensions.\nThe flexible read_delim() function allows you to read a wide variety of delimited files.\n\n\n\n\n\n\n\n\n\n\nPractice 1\n\n\n\n\n\nDownload the following files into the data folder. Read them in R, making sure you use the right read_*() function.\n\ntakete_maluma.txt (a tab separated file)\nRelatives.xlsx\nGo to https://datashare.ed.ac.uk/handle/10283/4006 and download the file conflict_data_.xlsx. Read both sheets (“conflict_data2” and “demographics”). Any issues?"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#reading-data",
    "href": "tutorials/tutorial-w03.html#reading-data",
    "title": "DAL tutorial - Week 3",
    "section": "4 Reading data",
    "text": "4 Reading data\nNow, let’s start writing code in the script!\nGenerally, you start the script with calls to library() to load all the packages you need for the script.\nNow we only need one package, tidyverse, but in most cases you will need more than one! The best practice is to attach all of packages first, in the top of your script. Please, get in the habit of doing this from now, so that you can keep your scripts tidy and pretty!\n\n\n\n\n\n\nWarning\n\n\n\nPlease, don’t include install.packages() in your R scripts!\nRemember, you only have to install a package once, and you can just type it in the Console.\nBut DO include library() in your scripts.\n\n\n\n4.1"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#import-.csv-files",
    "href": "tutorials/tutorial-w03.html#import-.csv-files",
    "title": "DAL tutorial - Week 3",
    "section": "3 Import .csv files",
    "text": "3 Import .csv files\nLet’s start with data from this paper: Song et al. 2020. Second language users exhibit shallow morphological processing. DOI: 10.1017/S0272263120000170.\nThe study consisted of a lexical decision task in which participants where first shown a prime, followed by a target word for which they had to indicate whether it was a real word or a nonce word.\nThe prime word belonged to one of three possible groups (Relation_type in the data) each of which refers to the morphological relation of the prime and the target word:\n\nUnrelated: for example, prolong (assuming unkindness as target, [[un-kind]-ness]).\nConstituent: unkind.\nNonConstituent: kindness.\n\n\n\n\n\n\n3.1 Download the data file\nPlease, follow these instructions carefully.\n\nDownload the file with the data by right-clicking on the following link and download the file: song2020.csv. (Note that tutorial files are also linked in the Course content page)\nCreate a folder called data/ (the slash is there just to remind you that it’s a folder, but you don’t have to include it in the name) in the RStudio project of the course.\n\nTo create a folder, go to the Files tab of the bottom-right panel in RStudio.\nMake sure you are viewing the project’s main folder.\nClick on the New Folder button, enter “data” in the text box and click OK\n\nMove the downloaded file into the data/ folder.\n\nOpen a Finder or File Explorer window.\nNavigate to the folder where you have saved the downloaded file (it will very likely be the Downloads/ folder).\nCopy the file.\nIn Finder or File Explorer, navigate to the RStudio project folder, then the data/ folder, and paste the file in there.\n\n\nThe rest of the tutorial will assume that you have created a folder called data/ in the Quarto project folder and that the files you download are in that folder.\nI recommend you to start being very organised with your files from now, whether it’s for this course or your dissertation or else. I also suggest to avoid overly nested structures (for example, avoid having one folder for each week for this course. Rather, save all data files in the data/ folder).\n\n\n\n\n\n\nOrganising your files\n\n\n\n\n\nThe Open Science Framework has the following recommendations that apply very well to any type of research project.\n\nUse one folder per project. This will also be your RStudio project folder.\nSeparate raw data from derived data.\nSeparate code from data.\nMake raw data read-only.\n\nTo learn more about this, check the OSF page Organising files.\nIn brief, what these recommendations mean is that you want a folder for your research project/course/else, and inside the folder two folders: one for data and one for code.\nThe data/ folder could further contain raw/ for raw data (data that should not be lost or changed, for example collected data or annotations) and derived/ for data that derives from the raw data, for example through automated data processing.\nI usually also have a separate folder called figs/ or img/ where I save plots. Of course which folders you will have it’s ultimately up to you and needs will vary depending on the project and field!\n\n\n\n\n\n3.2 The tidyverse packages\nImporting .csv files is very easy. You can use the read_csv() function from a collection of R packages known as the tidyverse.\nTo import data in R we will use the read_csv() function from the readr package, one of the tidyverse packages.\nInstalling the tidyverse packages is easy: you just need to install the tidyverse package and that will take care of installing the most important packages in the collection (called the “core” tidyverse packages).\nGo ahead and install the tidyverse from the Packages tab.1\n\n\n3.3 read_csv()\nThe read_csv() function from the readr package only requires you to specify the file path as a string (remember, strings are quoted between \" \", for example \"year_data.txt\"). On my computer, the file path of song2020.csv is /Users/ste/dal/data/song2020.csv, but on your computer the file path will be different, of course.\nAlso, note that it is not enough to use the read_csv() function. You also must assign the output of the read_csv() function (i.e. the data we are reading) to a variable, using the assignment arrow &lt;-, just like we were assigning values to variables in the previous weeks.\nAnd since the read_csv() is a function from the tidyverse, you first need to attach the tidyverse packages with library(tidyverse) (remember, you need to attach packages only once per session). This will attach the core tidyverse packages, including readr. Of course, you can also attach the individual packages directly: library(readr). If you use library(tidyverse) there is no need to attach individual tidyverse packages.\nBefore reading the data, create a new R script named tutorial_w03.R and save it in the code/ folder of your Quarto project.\nGenerally, you start the script with calls to library() to load all the packages you need for the script.\nNow we only need one package, tidyverse, but in most cases you will need more than one! The best practice is to attach all of packages first, in the top of your script. Please, get in the habit of doing this from now, so that you can keep your scripts tidy and pretty!\n\n\n\n\n\n\nWarning\n\n\n\nPlease, don’t include install.packages() in your R scripts!\nRemember, you only have to install a package once, and you can just type it in the Console.\nBut DO include library() in your scripts.\n\n\nAt the top of tutorial_w03.R, write the following lines of code. Then run the code.\n\nlibrary(tidyverse)\n\nsong2020 &lt;- read_csv(\"./data/song2020.csv\")\n\nRows: 6500 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): Group, ID, List, Target, Critical_Filler, Word_Nonword, Relation_ty...\ndbl (3): ACC, RT, logRT\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nIf you look at the Environment tab, you will see song2020 under Data.\nBut wait, what is that \"./data/song2020.csv\"? That’s a relative path. We briefly mentioned relative paths above, but let’s understand the details now. You will be able to view the data soon.\n\n\n3.4 Relative paths\n\n\n\n\n\n\nRelative path\n\n\n\nA relative path is a file path that is relative to a folder, which is represented by ./\n\n\nWhen you are using R scripts in Quarto projects, the ./ folder paths are relative to is the project folder! This is true whichever the name of the folder/project and whichever it’s location on your computer.\nFor example, if your project it’s called awesome_proj and it’s in Downloads/stuff/, then if you write ./data/results.csv you really mean Downloads/stuff/awesome_proj/data/results.csv!\nHow does R know the path is relative to the project folder?\nThat is because when working with Quarto projects, all relative paths are relative to the project folder (i.e. the folder with the .Rproj file)!\nThe folder which relative paths are relative to is called the working directory (directory is just another way of saying folder).\n\n\n\n\n\n\nWorking directory\n\n\n\nThe working directory is the folder which relative paths are relative to.\nWhen using RStudio projects, the working directory is the project folder.\n\n\nThe code read_csv(\"./data/song2020.csv\") above will work because you are using an RStudio project and inside the project folder there is a folder called data/ and in it there’s the song2020.csv file.\nSo from now on I encourage you to use Quarto projects, R scripts and relative paths always!\nThe benefit of doing so is that, if you move your project or rename it, or if you share the project with somebody, all the paths will just work because they are relative!\n\n\n\n\n\n\nGet the working directory\n\n\n\n\n\nYou can get the current working directory with the getwd() command.\nRun it now in the Console! Is the returned path the project folder path?\nIf not, it might be that you are not working from a Quarto project. Check the top-right corner of RStudio: is the project name in there or do you see Project (none)?\nIf it’s the latter, you are not in a Quarto project, but you are running R from somewhere else (meaning, the working directory is somewhere else). If so, close RStudio and open the project.\n\n\n\n\n\n3.5 View the data\nNow we can finally view the data.\nThe easiest way is to click on the name of the data listed in the Environment tab, in the top-right panel of RStudio.\nYou will see a nicely formatted table, as you would in a programme like Excel.\nData tables in R (i.e. tabular, spread-sheet like data) are called data frames or tibbles.2\nThe song2020 data frame contains 11 columns (called variables in the Environment tab). The 11 columns are the following:\n\nGroup: L1 vs L2 speakers of English.\nID: Subject unique ID.\nList: Word list (A to F).\nTarget: Target word in the lexical decision trial.\nACC: Lexical decision response accuracy (0 incorrect response, 1 correct response).\nRT: Reaction times of response in milliseconds.\nlogRT: Logged reaction times.\nCritical_Filler: Whether the trial was a filler or critical.\nWord_Nonword: Whether the Target was a real Word or a Nonword.\nRelation_type: The type of relation between prime and target word (Unrelated, NonCostituent, Constituent, Phonological).\nBranching: Constituent syntactic branching, Left and Right (shout out to Charlie Puth).\n\n\n\n\n\n\n\nQuiz 3\n\n\n\nHow many rows does shallow have?\n\n 11 650 6500"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#import-excel-sheets",
    "href": "tutorials/tutorial-w03.html#import-excel-sheets",
    "title": "DAL tutorial - Week 3",
    "section": "4 Import Excel sheets",
    "text": "4 Import Excel sheets"
  },
  {
    "objectID": "tutorials/tutorial-w03.html#import-.rds-files",
    "href": "tutorials/tutorial-w03.html#import-.rds-files",
    "title": "DAL tutorial - Week 3",
    "section": "5 Import .rds files",
    "text": "5 Import .rds files\n\n\n\n\n\n\nPractice 1\n\n\n\n\n\nDownload the following files into the data folder. Read them in R, making sure you use the right read_*() function.\n\ntakete_maluma.txt (a tab separated file)\nRelatives.xlsx\nGo to https://datashare.ed.ac.uk/handle/10283/4006 and download the file conflict_data_.xlsx. Read both sheets (“conflict_data2” and “demographics”). Any issues?"
  }
]